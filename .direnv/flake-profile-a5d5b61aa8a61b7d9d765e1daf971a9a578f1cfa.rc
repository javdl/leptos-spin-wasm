unset shellHook
PATH=${PATH:-}
nix_saved_PATH="$PATH"
XDG_DATA_DIRS=${XDG_DATA_DIRS:-}
nix_saved_XDG_DATA_DIRS="$XDG_DATA_DIRS"
AR='ar'
export AR
AR_FOR_BUILD='ar'
export AR_FOR_BUILD
AR_FOR_TARGET='ar'
export AR_FOR_TARGET
AS='as'
export AS
AS_FOR_BUILD='as'
export AS_FOR_BUILD
AS_FOR_TARGET='as'
export AS_FOR_TARGET
BASH='/nix/store/4fvc5fm8bszmkydng1ivrvr5cbvr1g60-bash-5.2p37/bin/bash'
CC='gcc'
export CC
CC_FOR_BUILD='gcc'
export CC_FOR_BUILD
CC_FOR_TARGET='gcc'
export CC_FOR_TARGET
CONFIG_SHELL='/nix/store/4fvc5fm8bszmkydng1ivrvr5cbvr1g60-bash-5.2p37/bin/bash'
export CONFIG_SHELL
CXX='g++'
export CXX
CXX_FOR_BUILD='g++'
export CXX_FOR_BUILD
CXX_FOR_TARGET='g++'
export CXX_FOR_TARGET
DETERMINISTIC_BUILD='1'
export DETERMINISTIC_BUILD
HOSTTYPE='x86_64'
HOST_PATH='/nix/store/lbmwfz63y1lfg68z3da2frw84kp815lk-python3.12-reuse-5.0.2/bin:/nix/store/qrc496n6fsqp4p5m5h8wmw5d5jwyw5mr-python3-3.12.8/bin:/nix/store/sj41z1gzqs939l1k03i86rjbvf99142n-python3.12-chardet-5.2.0/bin:/nix/store/bvbaqs9ca0z5hly2mdyamkisq2mwlwza-clippy-sarif-0.7.0/bin:/nix/store/vrpmgczh8nh64v2df8q4f5sdqq7mlc5h-sarif-fmt-0.7.0/bin:/nix/store/b0y9x06z23n9v5yghgh152pv3xhwmm9d-sqlite-3.47.2-bin/bin:/nix/store/bh1slni97lwl7x7m1kaksivla7hsrsvg-sqlx-cli-0.8.3/bin:/nix/store/p1k96ib2rlbs96xjycpyh99b650iwwrk-cargo-leptos-0.2.25/bin:/nix/store/d4jfcjq5ph9x1mwcszw1n1ap4c1vvkb8-fermyon-spin-3.0.0/bin:/nix/store/591apldfgm1gr238rbfc8ib0y1z8ng2y-gcc-wrapper-14-20241116/bin:/nix/store/xxwkjlfikd5q8nnpyysnx4dla8r54w56-binutils-wrapper-2.43.1/bin:/nix/store/lsy9s0skv65xhprr9yhmig2c844qgi5f-gnumake-4.4.1/bin:/nix/store/k1r91cjalyc2mzzllpv5hklhqn8wvgjr-nodejs-22.12.0/bin:/nix/store/bsdyv113pcng0zdh09kf11l2jkqf70gx-binaryen-120_b/bin:/nix/store/47487aw770nm5iq41wgn556gz8d4zipb-tailwindcss-3.4.17/bin:/nix/store/5acgdhnifp5hsvhw2w34jhs5xqjgv0v3-direnv-2.35.0/bin:/nix/store/ppf3qysxs0689bjl8vjmmln4w456nvbm-openssl-3.3.2-bin/bin:/nix/store/wy1fws8r7m3j9ivn8ha7vhyh9a40k1sa-freetype-2.13.3-dev/bin:/nix/store/j2w0ksqpakrb7rsdnhkid5r1wxs1p79i-bzip2-1.0.8-bin/bin:/nix/store/nf35c6arwgbny5qv956yb369gp3g7xjl-brotli-1.1.0/bin:/nix/store/5rvyn65jr9qcy1gcsz91zd3j5c65xjij-libpng-apng-1.6.43-dev/bin:/nix/store/7z9ki4d55828iiqydf190fkbplyn1i12-fontconfig-2.15.0-bin/bin:/nix/store/pw26z7msfmv291jq1qpp8bbaprs5hkfk-coreutils-9.5/bin:/nix/store/pvl69q0l5fiiblvsqz3l424617b7lw89-findutils-4.10.0/bin:/nix/store/nyqfk1jvmg3dzbp0n89x7957m3qh4ks4-diffutils-3.10/bin:/nix/store/v93bdqf52x2r2lqijv0f7x3yhylwy957-gnused-4.9/bin:/nix/store/01dri6m7g4bx0kkd39pkgfpzpj3i7y86-gnugrep-3.11/bin:/nix/store/2yvf4zm225q75mkma7914f4k7i0srfmg-gawk-5.3.1/bin:/nix/store/s6zpdhyi00867afvsyg8hf54q5llkffl-gnutar-1.35/bin:/nix/store/3ixlnrilky99c34xw3w69xyx54iahwcr-gzip-1.13/bin:/nix/store/j2w0ksqpakrb7rsdnhkid5r1wxs1p79i-bzip2-1.0.8-bin/bin:/nix/store/0lrk3s24y2l74zagz13mv0n7yp8zbqzg-gnumake-4.4.1/bin:/nix/store/4fvc5fm8bszmkydng1ivrvr5cbvr1g60-bash-5.2p37/bin:/nix/store/78z7sr6w7jv856axivb9fxwivklvaivf-patch-2.7.6/bin:/nix/store/2818caib67ysbakmx87qwq4dbffln9g8-xz-5.6.3-bin/bin:/nix/store/qh8jxbp98py266w8555hx4y9qpxfrfz0-file-5.46/bin'
export HOST_PATH
IFS=' 	
'
IN_NIX_SHELL='impure'
export IN_NIX_SHELL
LD='ld'
export LD
LD_FOR_BUILD='ld'
export LD_FOR_BUILD
LD_FOR_TARGET='ld'
export LD_FOR_TARGET
LINENO='76'
MACHTYPE='x86_64-pc-linux-gnu'
NIX_BINTOOLS='/nix/store/xxwkjlfikd5q8nnpyysnx4dla8r54w56-binutils-wrapper-2.43.1'
export NIX_BINTOOLS
NIX_BINTOOLS_FOR_BUILD='/nix/store/xxwkjlfikd5q8nnpyysnx4dla8r54w56-binutils-wrapper-2.43.1'
export NIX_BINTOOLS_FOR_BUILD
NIX_BINTOOLS_FOR_TARGET='/nix/store/xxwkjlfikd5q8nnpyysnx4dla8r54w56-binutils-wrapper-2.43.1'
export NIX_BINTOOLS_FOR_TARGET
NIX_BINTOOLS_WRAPPER_TARGET_BUILD_x86_64_unknown_linux_gnu='1'
export NIX_BINTOOLS_WRAPPER_TARGET_BUILD_x86_64_unknown_linux_gnu
NIX_BINTOOLS_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu='1'
export NIX_BINTOOLS_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu
NIX_BINTOOLS_WRAPPER_TARGET_TARGET_x86_64_unknown_linux_gnu='1'
export NIX_BINTOOLS_WRAPPER_TARGET_TARGET_x86_64_unknown_linux_gnu
NIX_BUILD_CORES='32'
export NIX_BUILD_CORES
NIX_CC='/nix/store/591apldfgm1gr238rbfc8ib0y1z8ng2y-gcc-wrapper-14-20241116'
export NIX_CC
NIX_CC_FOR_BUILD='/nix/store/591apldfgm1gr238rbfc8ib0y1z8ng2y-gcc-wrapper-14-20241116'
export NIX_CC_FOR_BUILD
NIX_CC_FOR_TARGET='/nix/store/591apldfgm1gr238rbfc8ib0y1z8ng2y-gcc-wrapper-14-20241116'
export NIX_CC_FOR_TARGET
NIX_CC_WRAPPER_TARGET_BUILD_x86_64_unknown_linux_gnu='1'
export NIX_CC_WRAPPER_TARGET_BUILD_x86_64_unknown_linux_gnu
NIX_CC_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu='1'
export NIX_CC_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu
NIX_CC_WRAPPER_TARGET_TARGET_x86_64_unknown_linux_gnu='1'
export NIX_CC_WRAPPER_TARGET_TARGET_x86_64_unknown_linux_gnu
NIX_CFLAGS_COMPILE=' -frandom-seed=wiyz2glnhx -isystem /nix/store/z8rm18lw5qypq0124q72fp91djbnqxc9-zstd-1.5.6-dev/include -isystem /nix/store/qrc496n6fsqp4p5m5h8wmw5d5jwyw5mr-python3-3.12.8/include -isystem /nix/store/dlvmhnany8yqpifr8md2wgsg9n6ckrar-sqlite-3.47.2-dev/include -isystem /nix/store/lsy9s0skv65xhprr9yhmig2c844qgi5f-gnumake-4.4.1/include -isystem /nix/store/k1r91cjalyc2mzzllpv5hklhqn8wvgjr-nodejs-22.12.0/include -isystem /nix/store/bsdyv113pcng0zdh09kf11l2jkqf70gx-binaryen-120_b/include -isystem /nix/store/liqflvxvksmwmccjilmky0gwxmdk58x3-openssl-3.3.2-dev/include -isystem /nix/store/18vbfn81dywpj9l62j4hkswcjyzd9vvd-fontconfig-2.15.0-dev/include -isystem /nix/store/wy1fws8r7m3j9ivn8ha7vhyh9a40k1sa-freetype-2.13.3-dev/include -isystem /nix/store/qr0p57jasfpkcacypjsyi62f69vyad3q-zlib-1.3.1-dev/include -isystem /nix/store/vfmn4l91zkhyp5nkz7nyiyq7aza0gxrf-bzip2-1.0.8-dev/include -isystem /nix/store/6qshp6mlih60gwrp4qrh03czi11xa5f9-brotli-1.1.0-dev/include -isystem /nix/store/5rvyn65jr9qcy1gcsz91zd3j5c65xjij-libpng-apng-1.6.43-dev/include -isystem /nix/store/z8rm18lw5qypq0124q72fp91djbnqxc9-zstd-1.5.6-dev/include -isystem /nix/store/qrc496n6fsqp4p5m5h8wmw5d5jwyw5mr-python3-3.12.8/include -isystem /nix/store/dlvmhnany8yqpifr8md2wgsg9n6ckrar-sqlite-3.47.2-dev/include -isystem /nix/store/lsy9s0skv65xhprr9yhmig2c844qgi5f-gnumake-4.4.1/include -isystem /nix/store/k1r91cjalyc2mzzllpv5hklhqn8wvgjr-nodejs-22.12.0/include -isystem /nix/store/bsdyv113pcng0zdh09kf11l2jkqf70gx-binaryen-120_b/include -isystem /nix/store/liqflvxvksmwmccjilmky0gwxmdk58x3-openssl-3.3.2-dev/include -isystem /nix/store/18vbfn81dywpj9l62j4hkswcjyzd9vvd-fontconfig-2.15.0-dev/include -isystem /nix/store/wy1fws8r7m3j9ivn8ha7vhyh9a40k1sa-freetype-2.13.3-dev/include -isystem /nix/store/qr0p57jasfpkcacypjsyi62f69vyad3q-zlib-1.3.1-dev/include -isystem /nix/store/vfmn4l91zkhyp5nkz7nyiyq7aza0gxrf-bzip2-1.0.8-dev/include -isystem /nix/store/6qshp6mlih60gwrp4qrh03czi11xa5f9-brotli-1.1.0-dev/include -isystem /nix/store/5rvyn65jr9qcy1gcsz91zd3j5c65xjij-libpng-apng-1.6.43-dev/include'
export NIX_CFLAGS_COMPILE
NIX_CFLAGS_COMPILE_FOR_BUILD=' -isystem /nix/store/z8rm18lw5qypq0124q72fp91djbnqxc9-zstd-1.5.6-dev/include -isystem /nix/store/qrc496n6fsqp4p5m5h8wmw5d5jwyw5mr-python3-3.12.8/include -isystem /nix/store/dlvmhnany8yqpifr8md2wgsg9n6ckrar-sqlite-3.47.2-dev/include -isystem /nix/store/lsy9s0skv65xhprr9yhmig2c844qgi5f-gnumake-4.4.1/include -isystem /nix/store/k1r91cjalyc2mzzllpv5hklhqn8wvgjr-nodejs-22.12.0/include -isystem /nix/store/bsdyv113pcng0zdh09kf11l2jkqf70gx-binaryen-120_b/include -isystem /nix/store/liqflvxvksmwmccjilmky0gwxmdk58x3-openssl-3.3.2-dev/include -isystem /nix/store/18vbfn81dywpj9l62j4hkswcjyzd9vvd-fontconfig-2.15.0-dev/include -isystem /nix/store/wy1fws8r7m3j9ivn8ha7vhyh9a40k1sa-freetype-2.13.3-dev/include -isystem /nix/store/qr0p57jasfpkcacypjsyi62f69vyad3q-zlib-1.3.1-dev/include -isystem /nix/store/vfmn4l91zkhyp5nkz7nyiyq7aza0gxrf-bzip2-1.0.8-dev/include -isystem /nix/store/6qshp6mlih60gwrp4qrh03czi11xa5f9-brotli-1.1.0-dev/include -isystem /nix/store/5rvyn65jr9qcy1gcsz91zd3j5c65xjij-libpng-apng-1.6.43-dev/include -isystem /nix/store/z8rm18lw5qypq0124q72fp91djbnqxc9-zstd-1.5.6-dev/include -isystem /nix/store/qrc496n6fsqp4p5m5h8wmw5d5jwyw5mr-python3-3.12.8/include -isystem /nix/store/dlvmhnany8yqpifr8md2wgsg9n6ckrar-sqlite-3.47.2-dev/include -isystem /nix/store/lsy9s0skv65xhprr9yhmig2c844qgi5f-gnumake-4.4.1/include -isystem /nix/store/k1r91cjalyc2mzzllpv5hklhqn8wvgjr-nodejs-22.12.0/include -isystem /nix/store/bsdyv113pcng0zdh09kf11l2jkqf70gx-binaryen-120_b/include -isystem /nix/store/liqflvxvksmwmccjilmky0gwxmdk58x3-openssl-3.3.2-dev/include -isystem /nix/store/18vbfn81dywpj9l62j4hkswcjyzd9vvd-fontconfig-2.15.0-dev/include -isystem /nix/store/wy1fws8r7m3j9ivn8ha7vhyh9a40k1sa-freetype-2.13.3-dev/include -isystem /nix/store/qr0p57jasfpkcacypjsyi62f69vyad3q-zlib-1.3.1-dev/include -isystem /nix/store/vfmn4l91zkhyp5nkz7nyiyq7aza0gxrf-bzip2-1.0.8-dev/include -isystem /nix/store/6qshp6mlih60gwrp4qrh03czi11xa5f9-brotli-1.1.0-dev/include -isystem /nix/store/5rvyn65jr9qcy1gcsz91zd3j5c65xjij-libpng-apng-1.6.43-dev/include -isystem /nix/store/z8rm18lw5qypq0124q72fp91djbnqxc9-zstd-1.5.6-dev/include -isystem /nix/store/qrc496n6fsqp4p5m5h8wmw5d5jwyw5mr-python3-3.12.8/include -isystem /nix/store/dlvmhnany8yqpifr8md2wgsg9n6ckrar-sqlite-3.47.2-dev/include -isystem /nix/store/lsy9s0skv65xhprr9yhmig2c844qgi5f-gnumake-4.4.1/include -isystem /nix/store/k1r91cjalyc2mzzllpv5hklhqn8wvgjr-nodejs-22.12.0/include -isystem /nix/store/bsdyv113pcng0zdh09kf11l2jkqf70gx-binaryen-120_b/include -isystem /nix/store/liqflvxvksmwmccjilmky0gwxmdk58x3-openssl-3.3.2-dev/include -isystem /nix/store/18vbfn81dywpj9l62j4hkswcjyzd9vvd-fontconfig-2.15.0-dev/include -isystem /nix/store/wy1fws8r7m3j9ivn8ha7vhyh9a40k1sa-freetype-2.13.3-dev/include -isystem /nix/store/qr0p57jasfpkcacypjsyi62f69vyad3q-zlib-1.3.1-dev/include -isystem /nix/store/vfmn4l91zkhyp5nkz7nyiyq7aza0gxrf-bzip2-1.0.8-dev/include -isystem /nix/store/6qshp6mlih60gwrp4qrh03czi11xa5f9-brotli-1.1.0-dev/include -isystem /nix/store/5rvyn65jr9qcy1gcsz91zd3j5c65xjij-libpng-apng-1.6.43-dev/include'
export NIX_CFLAGS_COMPILE_FOR_BUILD
NIX_CFLAGS_COMPILE_FOR_TARGET=' -isystem /nix/store/z8rm18lw5qypq0124q72fp91djbnqxc9-zstd-1.5.6-dev/include -isystem /nix/store/qrc496n6fsqp4p5m5h8wmw5d5jwyw5mr-python3-3.12.8/include -isystem /nix/store/dlvmhnany8yqpifr8md2wgsg9n6ckrar-sqlite-3.47.2-dev/include -isystem /nix/store/lsy9s0skv65xhprr9yhmig2c844qgi5f-gnumake-4.4.1/include -isystem /nix/store/k1r91cjalyc2mzzllpv5hklhqn8wvgjr-nodejs-22.12.0/include -isystem /nix/store/bsdyv113pcng0zdh09kf11l2jkqf70gx-binaryen-120_b/include -isystem /nix/store/liqflvxvksmwmccjilmky0gwxmdk58x3-openssl-3.3.2-dev/include -isystem /nix/store/18vbfn81dywpj9l62j4hkswcjyzd9vvd-fontconfig-2.15.0-dev/include -isystem /nix/store/wy1fws8r7m3j9ivn8ha7vhyh9a40k1sa-freetype-2.13.3-dev/include -isystem /nix/store/qr0p57jasfpkcacypjsyi62f69vyad3q-zlib-1.3.1-dev/include -isystem /nix/store/vfmn4l91zkhyp5nkz7nyiyq7aza0gxrf-bzip2-1.0.8-dev/include -isystem /nix/store/6qshp6mlih60gwrp4qrh03czi11xa5f9-brotli-1.1.0-dev/include -isystem /nix/store/5rvyn65jr9qcy1gcsz91zd3j5c65xjij-libpng-apng-1.6.43-dev/include'
export NIX_CFLAGS_COMPILE_FOR_TARGET
NIX_ENFORCE_NO_NATIVE='1'
export NIX_ENFORCE_NO_NATIVE
NIX_HARDENING_ENABLE='bindnow format fortify fortify3 pic relro stackprotector strictoverflow zerocallusedregs'
export NIX_HARDENING_ENABLE
NIX_LDFLAGS='-rpath /home/joost/git/leptos-spin-wasm/outputs/out/lib  -L/nix/store/56lh4rg2pbwhhjc42h1j7wxcgasc4nqi-rust-default-1.86.0-nightly-2025-01-23/lib -L/nix/store/c3q2k5kb7pmn5xvifjkschj4slyc55rp-zstd-1.5.6/lib -L/nix/store/qrc496n6fsqp4p5m5h8wmw5d5jwyw5mr-python3-3.12.8/lib -L/nix/store/rpx78bijr2wv26f1yhj1h50nwm61cl87-sqlite-3.47.2/lib -L/nix/store/bsdyv113pcng0zdh09kf11l2jkqf70gx-binaryen-120_b/lib -L/nix/store/5926bc2bqkr0882p4m6yq3wy5brnbwlv-openssl-3.3.2/lib -L/nix/store/zv9shv0566mrq0lvrws448rs52gc56k1-zlib-1.3.1/lib -L/nix/store/jhcqdd7rqcl0zxgbxx4m6jz3kd2026yw-bzip2-1.0.8/lib -L/nix/store/mzhn6vgk5g9p63gvzj7pgyia2mfp2glw-brotli-1.1.0-lib/lib -L/nix/store/m04yfi9gd23mjlwsarcwz955zbz4fgix-libpng-apng-1.6.43/lib -L/nix/store/45qzsdh101r753bz6dmjj6f4y9gabxkf-freetype-2.13.3/lib -L/nix/store/9nm6pvkz2mphw5p6wzww9ld3xfs3pfad-fontconfig-2.15.0-lib/lib -L/nix/store/56lh4rg2pbwhhjc42h1j7wxcgasc4nqi-rust-default-1.86.0-nightly-2025-01-23/lib -L/nix/store/c3q2k5kb7pmn5xvifjkschj4slyc55rp-zstd-1.5.6/lib -L/nix/store/qrc496n6fsqp4p5m5h8wmw5d5jwyw5mr-python3-3.12.8/lib -L/nix/store/rpx78bijr2wv26f1yhj1h50nwm61cl87-sqlite-3.47.2/lib -L/nix/store/bsdyv113pcng0zdh09kf11l2jkqf70gx-binaryen-120_b/lib -L/nix/store/5926bc2bqkr0882p4m6yq3wy5brnbwlv-openssl-3.3.2/lib -L/nix/store/zv9shv0566mrq0lvrws448rs52gc56k1-zlib-1.3.1/lib -L/nix/store/jhcqdd7rqcl0zxgbxx4m6jz3kd2026yw-bzip2-1.0.8/lib -L/nix/store/mzhn6vgk5g9p63gvzj7pgyia2mfp2glw-brotli-1.1.0-lib/lib -L/nix/store/m04yfi9gd23mjlwsarcwz955zbz4fgix-libpng-apng-1.6.43/lib -L/nix/store/45qzsdh101r753bz6dmjj6f4y9gabxkf-freetype-2.13.3/lib -L/nix/store/9nm6pvkz2mphw5p6wzww9ld3xfs3pfad-fontconfig-2.15.0-lib/lib'
export NIX_LDFLAGS
NIX_LDFLAGS_FOR_BUILD=' -L/nix/store/56lh4rg2pbwhhjc42h1j7wxcgasc4nqi-rust-default-1.86.0-nightly-2025-01-23/lib -L/nix/store/c3q2k5kb7pmn5xvifjkschj4slyc55rp-zstd-1.5.6/lib -L/nix/store/qrc496n6fsqp4p5m5h8wmw5d5jwyw5mr-python3-3.12.8/lib -L/nix/store/rpx78bijr2wv26f1yhj1h50nwm61cl87-sqlite-3.47.2/lib -L/nix/store/bsdyv113pcng0zdh09kf11l2jkqf70gx-binaryen-120_b/lib -L/nix/store/5926bc2bqkr0882p4m6yq3wy5brnbwlv-openssl-3.3.2/lib -L/nix/store/zv9shv0566mrq0lvrws448rs52gc56k1-zlib-1.3.1/lib -L/nix/store/jhcqdd7rqcl0zxgbxx4m6jz3kd2026yw-bzip2-1.0.8/lib -L/nix/store/mzhn6vgk5g9p63gvzj7pgyia2mfp2glw-brotli-1.1.0-lib/lib -L/nix/store/m04yfi9gd23mjlwsarcwz955zbz4fgix-libpng-apng-1.6.43/lib -L/nix/store/45qzsdh101r753bz6dmjj6f4y9gabxkf-freetype-2.13.3/lib -L/nix/store/9nm6pvkz2mphw5p6wzww9ld3xfs3pfad-fontconfig-2.15.0-lib/lib -L/nix/store/56lh4rg2pbwhhjc42h1j7wxcgasc4nqi-rust-default-1.86.0-nightly-2025-01-23/lib -L/nix/store/c3q2k5kb7pmn5xvifjkschj4slyc55rp-zstd-1.5.6/lib -L/nix/store/qrc496n6fsqp4p5m5h8wmw5d5jwyw5mr-python3-3.12.8/lib -L/nix/store/rpx78bijr2wv26f1yhj1h50nwm61cl87-sqlite-3.47.2/lib -L/nix/store/bsdyv113pcng0zdh09kf11l2jkqf70gx-binaryen-120_b/lib -L/nix/store/5926bc2bqkr0882p4m6yq3wy5brnbwlv-openssl-3.3.2/lib -L/nix/store/zv9shv0566mrq0lvrws448rs52gc56k1-zlib-1.3.1/lib -L/nix/store/jhcqdd7rqcl0zxgbxx4m6jz3kd2026yw-bzip2-1.0.8/lib -L/nix/store/mzhn6vgk5g9p63gvzj7pgyia2mfp2glw-brotli-1.1.0-lib/lib -L/nix/store/m04yfi9gd23mjlwsarcwz955zbz4fgix-libpng-apng-1.6.43/lib -L/nix/store/45qzsdh101r753bz6dmjj6f4y9gabxkf-freetype-2.13.3/lib -L/nix/store/9nm6pvkz2mphw5p6wzww9ld3xfs3pfad-fontconfig-2.15.0-lib/lib -L/nix/store/56lh4rg2pbwhhjc42h1j7wxcgasc4nqi-rust-default-1.86.0-nightly-2025-01-23/lib -L/nix/store/c3q2k5kb7pmn5xvifjkschj4slyc55rp-zstd-1.5.6/lib -L/nix/store/qrc496n6fsqp4p5m5h8wmw5d5jwyw5mr-python3-3.12.8/lib -L/nix/store/rpx78bijr2wv26f1yhj1h50nwm61cl87-sqlite-3.47.2/lib -L/nix/store/bsdyv113pcng0zdh09kf11l2jkqf70gx-binaryen-120_b/lib -L/nix/store/5926bc2bqkr0882p4m6yq3wy5brnbwlv-openssl-3.3.2/lib -L/nix/store/zv9shv0566mrq0lvrws448rs52gc56k1-zlib-1.3.1/lib -L/nix/store/jhcqdd7rqcl0zxgbxx4m6jz3kd2026yw-bzip2-1.0.8/lib -L/nix/store/mzhn6vgk5g9p63gvzj7pgyia2mfp2glw-brotli-1.1.0-lib/lib -L/nix/store/m04yfi9gd23mjlwsarcwz955zbz4fgix-libpng-apng-1.6.43/lib -L/nix/store/45qzsdh101r753bz6dmjj6f4y9gabxkf-freetype-2.13.3/lib -L/nix/store/9nm6pvkz2mphw5p6wzww9ld3xfs3pfad-fontconfig-2.15.0-lib/lib'
export NIX_LDFLAGS_FOR_BUILD
NIX_LDFLAGS_FOR_TARGET=' -L/nix/store/56lh4rg2pbwhhjc42h1j7wxcgasc4nqi-rust-default-1.86.0-nightly-2025-01-23/lib -L/nix/store/c3q2k5kb7pmn5xvifjkschj4slyc55rp-zstd-1.5.6/lib -L/nix/store/qrc496n6fsqp4p5m5h8wmw5d5jwyw5mr-python3-3.12.8/lib -L/nix/store/rpx78bijr2wv26f1yhj1h50nwm61cl87-sqlite-3.47.2/lib -L/nix/store/bsdyv113pcng0zdh09kf11l2jkqf70gx-binaryen-120_b/lib -L/nix/store/5926bc2bqkr0882p4m6yq3wy5brnbwlv-openssl-3.3.2/lib -L/nix/store/zv9shv0566mrq0lvrws448rs52gc56k1-zlib-1.3.1/lib -L/nix/store/jhcqdd7rqcl0zxgbxx4m6jz3kd2026yw-bzip2-1.0.8/lib -L/nix/store/mzhn6vgk5g9p63gvzj7pgyia2mfp2glw-brotli-1.1.0-lib/lib -L/nix/store/m04yfi9gd23mjlwsarcwz955zbz4fgix-libpng-apng-1.6.43/lib -L/nix/store/45qzsdh101r753bz6dmjj6f4y9gabxkf-freetype-2.13.3/lib -L/nix/store/9nm6pvkz2mphw5p6wzww9ld3xfs3pfad-fontconfig-2.15.0-lib/lib'
export NIX_LDFLAGS_FOR_TARGET
NIX_NO_SELF_RPATH='1'
NIX_PKG_CONFIG_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu='1'
export NIX_PKG_CONFIG_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu
NIX_STORE='/nix/store'
export NIX_STORE
NM='nm'
export NM
NM_FOR_BUILD='nm'
export NM_FOR_BUILD
NM_FOR_TARGET='nm'
export NM_FOR_TARGET
NODE_PATH='/nix/store/k1r91cjalyc2mzzllpv5hklhqn8wvgjr-nodejs-22.12.0/lib/node_modules'
export NODE_PATH
OBJCOPY='objcopy'
export OBJCOPY
OBJCOPY_FOR_BUILD='objcopy'
export OBJCOPY_FOR_BUILD
OBJCOPY_FOR_TARGET='objcopy'
export OBJCOPY_FOR_TARGET
OBJDUMP='objdump'
export OBJDUMP
OBJDUMP_FOR_BUILD='objdump'
export OBJDUMP_FOR_BUILD
OBJDUMP_FOR_TARGET='objdump'
export OBJDUMP_FOR_TARGET
OLDPWD=''
export OLDPWD
OPTERR='1'
OSTYPE='linux-gnu'
PATH='/nix/store/591apldfgm1gr238rbfc8ib0y1z8ng2y-gcc-wrapper-14-20241116/bin:/nix/store/gnf3mv68i5g6jmabnbbncsar3kbg13zd-gcc-14-20241116/bin:/nix/store/a17b952gdq8g179vymqxmjah0ylgwd64-glibc-2.40-36-bin/bin:/nix/store/pw26z7msfmv291jq1qpp8bbaprs5hkfk-coreutils-9.5/bin:/nix/store/xxwkjlfikd5q8nnpyysnx4dla8r54w56-binutils-wrapper-2.43.1/bin:/nix/store/a1cr17kwgakznfw4pp8paw8yv189ikk5-binutils-2.43.1/bin:/nix/store/56lh4rg2pbwhhjc42h1j7wxcgasc4nqi-rust-default-1.86.0-nightly-2025-01-23/bin:/nix/store/q5h7fl6q9rza6q300nnpmf5fgg6c73a6-pkg-config-wrapper-0.29.2/bin:/nix/store/0h7b0vynz1ygps1863h6mmcz61dhdkfv-rsync-3.4.1/bin:/nix/store/sh9j0jqldx78pdi8cw672fm79lbdhs6g-zstd-1.5.6-bin/bin:/nix/store/c3q2k5kb7pmn5xvifjkschj4slyc55rp-zstd-1.5.6/bin:/nix/store/bl9vwzyawyad6ldhvnnp28drzjm7q0v9-patchelf-0.15.0/bin:/nix/store/lbmwfz63y1lfg68z3da2frw84kp815lk-python3.12-reuse-5.0.2/bin:/nix/store/qrc496n6fsqp4p5m5h8wmw5d5jwyw5mr-python3-3.12.8/bin:/nix/store/sj41z1gzqs939l1k03i86rjbvf99142n-python3.12-chardet-5.2.0/bin:/nix/store/bvbaqs9ca0z5hly2mdyamkisq2mwlwza-clippy-sarif-0.7.0/bin:/nix/store/vrpmgczh8nh64v2df8q4f5sdqq7mlc5h-sarif-fmt-0.7.0/bin:/nix/store/b0y9x06z23n9v5yghgh152pv3xhwmm9d-sqlite-3.47.2-bin/bin:/nix/store/bh1slni97lwl7x7m1kaksivla7hsrsvg-sqlx-cli-0.8.3/bin:/nix/store/p1k96ib2rlbs96xjycpyh99b650iwwrk-cargo-leptos-0.2.25/bin:/nix/store/d4jfcjq5ph9x1mwcszw1n1ap4c1vvkb8-fermyon-spin-3.0.0/bin:/nix/store/lsy9s0skv65xhprr9yhmig2c844qgi5f-gnumake-4.4.1/bin:/nix/store/k1r91cjalyc2mzzllpv5hklhqn8wvgjr-nodejs-22.12.0/bin:/nix/store/bsdyv113pcng0zdh09kf11l2jkqf70gx-binaryen-120_b/bin:/nix/store/47487aw770nm5iq41wgn556gz8d4zipb-tailwindcss-3.4.17/bin:/nix/store/5acgdhnifp5hsvhw2w34jhs5xqjgv0v3-direnv-2.35.0/bin:/nix/store/ppf3qysxs0689bjl8vjmmln4w456nvbm-openssl-3.3.2-bin/bin:/nix/store/wy1fws8r7m3j9ivn8ha7vhyh9a40k1sa-freetype-2.13.3-dev/bin:/nix/store/j2w0ksqpakrb7rsdnhkid5r1wxs1p79i-bzip2-1.0.8-bin/bin:/nix/store/nf35c6arwgbny5qv956yb369gp3g7xjl-brotli-1.1.0/bin:/nix/store/5rvyn65jr9qcy1gcsz91zd3j5c65xjij-libpng-apng-1.6.43-dev/bin:/nix/store/7z9ki4d55828iiqydf190fkbplyn1i12-fontconfig-2.15.0-bin/bin:/nix/store/pw26z7msfmv291jq1qpp8bbaprs5hkfk-coreutils-9.5/bin:/nix/store/pvl69q0l5fiiblvsqz3l424617b7lw89-findutils-4.10.0/bin:/nix/store/nyqfk1jvmg3dzbp0n89x7957m3qh4ks4-diffutils-3.10/bin:/nix/store/v93bdqf52x2r2lqijv0f7x3yhylwy957-gnused-4.9/bin:/nix/store/01dri6m7g4bx0kkd39pkgfpzpj3i7y86-gnugrep-3.11/bin:/nix/store/2yvf4zm225q75mkma7914f4k7i0srfmg-gawk-5.3.1/bin:/nix/store/s6zpdhyi00867afvsyg8hf54q5llkffl-gnutar-1.35/bin:/nix/store/3ixlnrilky99c34xw3w69xyx54iahwcr-gzip-1.13/bin:/nix/store/j2w0ksqpakrb7rsdnhkid5r1wxs1p79i-bzip2-1.0.8-bin/bin:/nix/store/0lrk3s24y2l74zagz13mv0n7yp8zbqzg-gnumake-4.4.1/bin:/nix/store/4fvc5fm8bszmkydng1ivrvr5cbvr1g60-bash-5.2p37/bin:/nix/store/78z7sr6w7jv856axivb9fxwivklvaivf-patch-2.7.6/bin:/nix/store/2818caib67ysbakmx87qwq4dbffln9g8-xz-5.6.3-bin/bin:/nix/store/qh8jxbp98py266w8555hx4y9qpxfrfz0-file-5.46/bin'
export PATH
PKG_CONFIG='pkg-config'
export PKG_CONFIG
PKG_CONFIG_PATH='/nix/store/z8rm18lw5qypq0124q72fp91djbnqxc9-zstd-1.5.6-dev/lib/pkgconfig:/nix/store/qrc496n6fsqp4p5m5h8wmw5d5jwyw5mr-python3-3.12.8/lib/pkgconfig:/nix/store/dlvmhnany8yqpifr8md2wgsg9n6ckrar-sqlite-3.47.2-dev/lib/pkgconfig:/nix/store/liqflvxvksmwmccjilmky0gwxmdk58x3-openssl-3.3.2-dev/lib/pkgconfig:/nix/store/18vbfn81dywpj9l62j4hkswcjyzd9vvd-fontconfig-2.15.0-dev/lib/pkgconfig:/nix/store/wy1fws8r7m3j9ivn8ha7vhyh9a40k1sa-freetype-2.13.3-dev/lib/pkgconfig:/nix/store/qr0p57jasfpkcacypjsyi62f69vyad3q-zlib-1.3.1-dev/lib/pkgconfig:/nix/store/vfmn4l91zkhyp5nkz7nyiyq7aza0gxrf-bzip2-1.0.8-dev/lib/pkgconfig:/nix/store/6qshp6mlih60gwrp4qrh03czi11xa5f9-brotli-1.1.0-dev/lib/pkgconfig:/nix/store/5rvyn65jr9qcy1gcsz91zd3j5c65xjij-libpng-apng-1.6.43-dev/lib/pkgconfig'
export PKG_CONFIG_PATH
PS4='+ '
PYTHONHASHSEED='0'
export PYTHONHASHSEED
PYTHONNOUSERSITE='1'
export PYTHONNOUSERSITE
PYTHONPATH='/nix/store/lbmwfz63y1lfg68z3da2frw84kp815lk-python3.12-reuse-5.0.2/lib/python3.12/site-packages:/nix/store/x3hp0a4yqspha3qxp396a7im4rz8q5l8-python3.12-attrs-24.2.0/lib/python3.12/site-packages:/nix/store/qrc496n6fsqp4p5m5h8wmw5d5jwyw5mr-python3-3.12.8/lib/python3.12/site-packages:/nix/store/4mm8xlpx4m0v54ifcq6xs622fq5laxl5-python3.12-binaryornot-0.4.4/lib/python3.12/site-packages:/nix/store/sj41z1gzqs939l1k03i86rjbvf99142n-python3.12-chardet-5.2.0/lib/python3.12/site-packages:/nix/store/vf3zxs207j7iqkfzycf3r06vv1n94f10-python3.12-boolean-py-4.0/lib/python3.12/site-packages:/nix/store/smb419x6dzn8yzlxls29zvr73cfj203x-python3.12-click-8.1.7/lib/python3.12/site-packages:/nix/store/s8x94hbya7y0agx86pdfrc3186mrwd11-python3.12-python-debian-0.1.49/lib/python3.12/site-packages:/nix/store/qp7afjhrz7aqihnbgf4zkqy2lr526m8c-python3.12-jinja2-3.1.5/lib/python3.12/site-packages:/nix/store/sk5053fdf85fis2yln70wnk1rcix7vpk-python3.12-markupsafe-3.0.2/lib/python3.12/site-packages:/nix/store/zgnvjbfwjg40szljxb5z48lkjwk0989d-python3.12-license-expression-30.4.1/lib/python3.12/site-packages:/nix/store/21zjs1yz2ml3bnp5lv49ghssiw7hzldf-python3.12-tomlkit-0.13.2/lib/python3.12/site-packages'
export PYTHONPATH
RANLIB='ranlib'
export RANLIB
RANLIB_FOR_BUILD='ranlib'
export RANLIB_FOR_BUILD
RANLIB_FOR_TARGET='ranlib'
export RANLIB_FOR_TARGET
READELF='readelf'
export READELF
READELF_FOR_BUILD='readelf'
export READELF_FOR_BUILD
READELF_FOR_TARGET='readelf'
export READELF_FOR_TARGET
SHELL='/nix/store/4fvc5fm8bszmkydng1ivrvr5cbvr1g60-bash-5.2p37/bin/bash'
export SHELL
SIZE='size'
export SIZE
SIZE_FOR_BUILD='size'
export SIZE_FOR_BUILD
SIZE_FOR_TARGET='size'
export SIZE_FOR_TARGET
SOURCE_DATE_EPOCH='315532800'
export SOURCE_DATE_EPOCH
STRINGS='strings'
export STRINGS
STRINGS_FOR_BUILD='strings'
export STRINGS_FOR_BUILD
STRINGS_FOR_TARGET='strings'
export STRINGS_FOR_TARGET
STRIP='strip'
export STRIP
STRIP_FOR_BUILD='strip'
export STRIP_FOR_BUILD
STRIP_FOR_TARGET='strip'
export STRIP_FOR_TARGET
XDG_DATA_DIRS='/nix/store/56lh4rg2pbwhhjc42h1j7wxcgasc4nqi-rust-default-1.86.0-nightly-2025-01-23/share:/nix/store/q5h7fl6q9rza6q300nnpmf5fgg6c73a6-pkg-config-wrapper-0.29.2/share:/nix/store/0h7b0vynz1ygps1863h6mmcz61dhdkfv-rsync-3.4.1/share:/nix/store/c3q2k5kb7pmn5xvifjkschj4slyc55rp-zstd-1.5.6/share:/nix/store/bl9vwzyawyad6ldhvnnp28drzjm7q0v9-patchelf-0.15.0/share'
export XDG_DATA_DIRS
_PYTHON_HOST_PLATFORM='linux-x86_64'
export _PYTHON_HOST_PLATFORM
_PYTHON_SYSCONFIGDATA_NAME='_sysconfigdata__linux_x86_64-linux-gnu'
export _PYTHON_SYSCONFIGDATA_NAME
__structuredAttrs=''
export __structuredAttrs
_substituteStream_has_warned_replace_deprecation='false'
buildInputs='/nix/store/lbmwfz63y1lfg68z3da2frw84kp815lk-python3.12-reuse-5.0.2 /nix/store/bvbaqs9ca0z5hly2mdyamkisq2mwlwza-clippy-sarif-0.7.0 /nix/store/vrpmgczh8nh64v2df8q4f5sdqq7mlc5h-sarif-fmt-0.7.0 /nix/store/dlvmhnany8yqpifr8md2wgsg9n6ckrar-sqlite-3.47.2-dev /nix/store/bh1slni97lwl7x7m1kaksivla7hsrsvg-sqlx-cli-0.8.3 /nix/store/p1k96ib2rlbs96xjycpyh99b650iwwrk-cargo-leptos-0.2.25 /nix/store/d4jfcjq5ph9x1mwcszw1n1ap4c1vvkb8-fermyon-spin-3.0.0 /nix/store/591apldfgm1gr238rbfc8ib0y1z8ng2y-gcc-wrapper-14-20241116 /nix/store/lsy9s0skv65xhprr9yhmig2c844qgi5f-gnumake-4.4.1 /nix/store/k1r91cjalyc2mzzllpv5hklhqn8wvgjr-nodejs-22.12.0 /nix/store/bsdyv113pcng0zdh09kf11l2jkqf70gx-binaryen-120_b /nix/store/47487aw770nm5iq41wgn556gz8d4zipb-tailwindcss-3.4.17 /nix/store/5acgdhnifp5hsvhw2w34jhs5xqjgv0v3-direnv-2.35.0 /nix/store/liqflvxvksmwmccjilmky0gwxmdk58x3-openssl-3.3.2-dev /nix/store/18vbfn81dywpj9l62j4hkswcjyzd9vvd-fontconfig-2.15.0-dev'
export buildInputs
buildPhase='{ echo "------------------------------------------------------------";
  echo " WARNING: the existence of this path is not guaranteed.";
  echo " It is an internal implementation detail for pkgs.mkShell.";
  echo "------------------------------------------------------------";
  echo;
  # Record all build inputs as runtime dependencies
  export;
} >> "$out"
'
export buildPhase
builder='/nix/store/4fvc5fm8bszmkydng1ivrvr5cbvr1g60-bash-5.2p37/bin/bash'
export builder
cmakeFlags=''
export cmakeFlags
configureFlags=''
export configureFlags
defaultBuildInputs=''
defaultNativeBuildInputs='/nix/store/bl9vwzyawyad6ldhvnnp28drzjm7q0v9-patchelf-0.15.0 /nix/store/b4mv6ph8hj4y9qx5xf7zhqyb2fzpqhci-update-autotools-gnu-config-scripts-hook /nix/store/h9lc1dpi14z7is86ffhl3ld569138595-audit-tmpdir.sh /nix/store/m54bmrhj6fqz8nds5zcj97w9s9bckc9v-compress-man-pages.sh /nix/store/wgrbkkaldkrlrni33ccvm3b6vbxzb656-make-symlinks-relative.sh /nix/store/5yzw0vhkyszf2d179m0qfkgxmp5wjjx4-move-docs.sh /nix/store/fyaryjvghbkpfnsyw97hb3lyb37s1pd6-move-lib64.sh /nix/store/kd4xwxjpjxi71jkm6ka0np72if9rm3y0-move-sbin.sh /nix/store/pag6l61paj1dc9sv15l7bm5c17xn5kyk-move-systemd-user-units.sh /nix/store/jivxp510zxakaaic7qkrb7v1dd2rdbw9-multiple-outputs.sh /nix/store/q84p4jvn5yalz937azdrfbyy32kl5s16-patch-shebangs.sh /nix/store/cickvswrvann041nqxb0rxilc46svw1n-prune-libtool-files.sh /nix/store/xyff06pkhki3qy1ls77w10s0v79c9il0-reproducible-builds.sh /nix/store/z7k98578dfzi6l3hsvbivzm7hfqlk0zc-set-source-date-epoch-to-latest.sh /nix/store/pilsssjjdxvdphlg2h19p0bfx5q0jzkn-strip.sh /nix/store/591apldfgm1gr238rbfc8ib0y1z8ng2y-gcc-wrapper-14-20241116'
depsBuildBuild=''
export depsBuildBuild
depsBuildBuildPropagated=''
export depsBuildBuildPropagated
depsBuildTarget=''
export depsBuildTarget
depsBuildTargetPropagated=''
export depsBuildTargetPropagated
depsHostHost=''
export depsHostHost
depsHostHostPropagated=''
export depsHostHostPropagated
depsTargetTarget=''
export depsTargetTarget
depsTargetTargetPropagated=''
export depsTargetTargetPropagated
doCheck=''
export doCheck
doInstallCheck=''
export doInstallCheck
dontAddDisableDepTrack='1'
export dontAddDisableDepTrack
declare -a envBuildBuildHooks=('ccWrapper_addCVars' 'bintoolsWrapper_addLDVars' )
declare -a envBuildHostHooks=('ccWrapper_addCVars' 'bintoolsWrapper_addLDVars' )
declare -a envBuildTargetHooks=('ccWrapper_addCVars' 'bintoolsWrapper_addLDVars' )
declare -a envHostHostHooks=('ccWrapper_addCVars' 'bintoolsWrapper_addLDVars' 'pkgConfigWrapper_addPkgConfigPath' 'addPythonPath' 'sysconfigdataHook' 'addNodePath' )
declare -a envHostTargetHooks=('ccWrapper_addCVars' 'bintoolsWrapper_addLDVars' 'pkgConfigWrapper_addPkgConfigPath' 'addPythonPath' 'sysconfigdataHook' 'addNodePath' )
declare -a envTargetTargetHooks=('ccWrapper_addCVars' 'bintoolsWrapper_addLDVars' )
declare -a fixupOutputHooks=('if [ -z "${dontPatchELF-}" ]; then patchELF "$prefix"; fi' 'if [[ -z "${noAuditTmpdir-}" && -e "$prefix" ]]; then auditTmpdir "$prefix"; fi' 'if [ -z "${dontGzipMan-}" ]; then compressManPages "$prefix"; fi' '_moveLib64' '_moveSbin' '_moveSystemdUserUnits' 'patchShebangsAuto' '_pruneLibtoolFiles' '_doStrip' )
guess='32'
initialPath='/nix/store/pw26z7msfmv291jq1qpp8bbaprs5hkfk-coreutils-9.5 /nix/store/pvl69q0l5fiiblvsqz3l424617b7lw89-findutils-4.10.0 /nix/store/nyqfk1jvmg3dzbp0n89x7957m3qh4ks4-diffutils-3.10 /nix/store/v93bdqf52x2r2lqijv0f7x3yhylwy957-gnused-4.9 /nix/store/01dri6m7g4bx0kkd39pkgfpzpj3i7y86-gnugrep-3.11 /nix/store/2yvf4zm225q75mkma7914f4k7i0srfmg-gawk-5.3.1 /nix/store/s6zpdhyi00867afvsyg8hf54q5llkffl-gnutar-1.35 /nix/store/3ixlnrilky99c34xw3w69xyx54iahwcr-gzip-1.13 /nix/store/j2w0ksqpakrb7rsdnhkid5r1wxs1p79i-bzip2-1.0.8-bin /nix/store/0lrk3s24y2l74zagz13mv0n7yp8zbqzg-gnumake-4.4.1 /nix/store/4fvc5fm8bszmkydng1ivrvr5cbvr1g60-bash-5.2p37 /nix/store/78z7sr6w7jv856axivb9fxwivklvaivf-patch-2.7.6 /nix/store/2818caib67ysbakmx87qwq4dbffln9g8-xz-5.6.3-bin /nix/store/qh8jxbp98py266w8555hx4y9qpxfrfz0-file-5.46'
mesonFlags=''
export mesonFlags
name='nix-shell-env'
export name
nativeBuildInputs='/nix/store/56lh4rg2pbwhhjc42h1j7wxcgasc4nqi-rust-default-1.86.0-nightly-2025-01-23 /nix/store/q5h7fl6q9rza6q300nnpmf5fgg6c73a6-pkg-config-wrapper-0.29.2 /nix/store/591apldfgm1gr238rbfc8ib0y1z8ng2y-gcc-wrapper-14-20241116 /nix/store/jxz9ayyy7z865pz6p4pjwrhffmbcwd9q-installFromCargoBuildLogHook /nix/store/lxykk1z6ksm2lv0wnx0cla7h1qlxpfqr-removeReferencesToRustToolchainHook /nix/store/mxr9hnqi751ifrga2hhc7vw4n0nxwlpw-removeReferencesToVendoredSourcesHook /nix/store/56lh4rg2pbwhhjc42h1j7wxcgasc4nqi-rust-default-1.86.0-nightly-2025-01-23 /nix/store/avhrhy3xmzr0s3bjrqbgdrgqhsm7p79a-cargoHelperFunctionsHook /nix/store/a7rlil916kjv3sa914dbap4yxawalpkq-configureCargoCommonVarsHook /nix/store/8si8zxycd5hapsl0yql4nxs5khs2awag-configureCargoVendoredDepsHook /nix/store/zhd4208bl6ipxhcxg8jvvg5fh39gl3jn-inheritCargoArtifactsHook /nix/store/ifkif4sxn6zz6ffknkdqr9fmhyy8vs1y-installCargoArtifactsHook /nix/store/56cq3ij7qfd103px4sw02ckvif8ws8vs-replaceCargoLockHook /nix/store/0h7b0vynz1ygps1863h6mmcz61dhdkfv-rsync-3.4.1 /nix/store/56lh4rg2pbwhhjc42h1j7wxcgasc4nqi-rust-default-1.86.0-nightly-2025-01-23 /nix/store/z8rm18lw5qypq0124q72fp91djbnqxc9-zstd-1.5.6-dev'
export nativeBuildInputs
out='/home/joost/git/leptos-spin-wasm/outputs/out'
export out
outputBin='out'
outputDev='out'
outputDevdoc='REMOVE'
outputDevman='out'
outputDoc='out'
outputInclude='out'
outputInfo='out'
outputLib='out'
outputMan='out'
outputs='out'
export outputs
patches=''
export patches
phases='buildPhase'
export phases
pkg='/nix/store/591apldfgm1gr238rbfc8ib0y1z8ng2y-gcc-wrapper-14-20241116'
declare -a pkgsBuildBuild=('/nix/store/591apldfgm1gr238rbfc8ib0y1z8ng2y-gcc-wrapper-14-20241116' '/nix/store/xxwkjlfikd5q8nnpyysnx4dla8r54w56-binutils-wrapper-2.43.1' )
declare -a pkgsBuildHost=('/nix/store/56lh4rg2pbwhhjc42h1j7wxcgasc4nqi-rust-default-1.86.0-nightly-2025-01-23' '/nix/store/591apldfgm1gr238rbfc8ib0y1z8ng2y-gcc-wrapper-14-20241116' '/nix/store/xxwkjlfikd5q8nnpyysnx4dla8r54w56-binutils-wrapper-2.43.1' '/nix/store/q5h7fl6q9rza6q300nnpmf5fgg6c73a6-pkg-config-wrapper-0.29.2' '/nix/store/jxz9ayyy7z865pz6p4pjwrhffmbcwd9q-installFromCargoBuildLogHook' '/nix/store/lxykk1z6ksm2lv0wnx0cla7h1qlxpfqr-removeReferencesToRustToolchainHook' '/nix/store/mxr9hnqi751ifrga2hhc7vw4n0nxwlpw-removeReferencesToVendoredSourcesHook' '/nix/store/avhrhy3xmzr0s3bjrqbgdrgqhsm7p79a-cargoHelperFunctionsHook' '/nix/store/a7rlil916kjv3sa914dbap4yxawalpkq-configureCargoCommonVarsHook' '/nix/store/8si8zxycd5hapsl0yql4nxs5khs2awag-configureCargoVendoredDepsHook' '/nix/store/zhd4208bl6ipxhcxg8jvvg5fh39gl3jn-inheritCargoArtifactsHook' '/nix/store/ifkif4sxn6zz6ffknkdqr9fmhyy8vs1y-installCargoArtifactsHook' '/nix/store/56cq3ij7qfd103px4sw02ckvif8ws8vs-replaceCargoLockHook' '/nix/store/0h7b0vynz1ygps1863h6mmcz61dhdkfv-rsync-3.4.1' '/nix/store/z8rm18lw5qypq0124q72fp91djbnqxc9-zstd-1.5.6-dev' '/nix/store/sh9j0jqldx78pdi8cw672fm79lbdhs6g-zstd-1.5.6-bin' '/nix/store/c3q2k5kb7pmn5xvifjkschj4slyc55rp-zstd-1.5.6' '/nix/store/bl9vwzyawyad6ldhvnnp28drzjm7q0v9-patchelf-0.15.0' '/nix/store/b4mv6ph8hj4y9qx5xf7zhqyb2fzpqhci-update-autotools-gnu-config-scripts-hook' '/nix/store/h9lc1dpi14z7is86ffhl3ld569138595-audit-tmpdir.sh' '/nix/store/m54bmrhj6fqz8nds5zcj97w9s9bckc9v-compress-man-pages.sh' '/nix/store/wgrbkkaldkrlrni33ccvm3b6vbxzb656-make-symlinks-relative.sh' '/nix/store/5yzw0vhkyszf2d179m0qfkgxmp5wjjx4-move-docs.sh' '/nix/store/fyaryjvghbkpfnsyw97hb3lyb37s1pd6-move-lib64.sh' '/nix/store/kd4xwxjpjxi71jkm6ka0np72if9rm3y0-move-sbin.sh' '/nix/store/pag6l61paj1dc9sv15l7bm5c17xn5kyk-move-systemd-user-units.sh' '/nix/store/jivxp510zxakaaic7qkrb7v1dd2rdbw9-multiple-outputs.sh' '/nix/store/q84p4jvn5yalz937azdrfbyy32kl5s16-patch-shebangs.sh' '/nix/store/cickvswrvann041nqxb0rxilc46svw1n-prune-libtool-files.sh' '/nix/store/xyff06pkhki3qy1ls77w10s0v79c9il0-reproducible-builds.sh' '/nix/store/z7k98578dfzi6l3hsvbivzm7hfqlk0zc-set-source-date-epoch-to-latest.sh' '/nix/store/pilsssjjdxvdphlg2h19p0bfx5q0jzkn-strip.sh' )
declare -a pkgsBuildTarget=()
declare -a pkgsHostHost=()
declare -a pkgsHostTarget=('/nix/store/lbmwfz63y1lfg68z3da2frw84kp815lk-python3.12-reuse-5.0.2' '/nix/store/x3hp0a4yqspha3qxp396a7im4rz8q5l8-python3.12-attrs-24.2.0' '/nix/store/qrc496n6fsqp4p5m5h8wmw5d5jwyw5mr-python3-3.12.8' '/nix/store/4mm8xlpx4m0v54ifcq6xs622fq5laxl5-python3.12-binaryornot-0.4.4' '/nix/store/sj41z1gzqs939l1k03i86rjbvf99142n-python3.12-chardet-5.2.0' '/nix/store/vf3zxs207j7iqkfzycf3r06vv1n94f10-python3.12-boolean-py-4.0' '/nix/store/smb419x6dzn8yzlxls29zvr73cfj203x-python3.12-click-8.1.7' '/nix/store/s8x94hbya7y0agx86pdfrc3186mrwd11-python3.12-python-debian-0.1.49' '/nix/store/qp7afjhrz7aqihnbgf4zkqy2lr526m8c-python3.12-jinja2-3.1.5' '/nix/store/sk5053fdf85fis2yln70wnk1rcix7vpk-python3.12-markupsafe-3.0.2' '/nix/store/zgnvjbfwjg40szljxb5z48lkjwk0989d-python3.12-license-expression-30.4.1' '/nix/store/21zjs1yz2ml3bnp5lv49ghssiw7hzldf-python3.12-tomlkit-0.13.2' '/nix/store/bvbaqs9ca0z5hly2mdyamkisq2mwlwza-clippy-sarif-0.7.0' '/nix/store/vrpmgczh8nh64v2df8q4f5sdqq7mlc5h-sarif-fmt-0.7.0' '/nix/store/dlvmhnany8yqpifr8md2wgsg9n6ckrar-sqlite-3.47.2-dev' '/nix/store/b0y9x06z23n9v5yghgh152pv3xhwmm9d-sqlite-3.47.2-bin' '/nix/store/rpx78bijr2wv26f1yhj1h50nwm61cl87-sqlite-3.47.2' '/nix/store/bh1slni97lwl7x7m1kaksivla7hsrsvg-sqlx-cli-0.8.3' '/nix/store/p1k96ib2rlbs96xjycpyh99b650iwwrk-cargo-leptos-0.2.25' '/nix/store/d4jfcjq5ph9x1mwcszw1n1ap4c1vvkb8-fermyon-spin-3.0.0' '/nix/store/591apldfgm1gr238rbfc8ib0y1z8ng2y-gcc-wrapper-14-20241116' '/nix/store/xxwkjlfikd5q8nnpyysnx4dla8r54w56-binutils-wrapper-2.43.1' '/nix/store/lsy9s0skv65xhprr9yhmig2c844qgi5f-gnumake-4.4.1' '/nix/store/k1r91cjalyc2mzzllpv5hklhqn8wvgjr-nodejs-22.12.0' '/nix/store/bsdyv113pcng0zdh09kf11l2jkqf70gx-binaryen-120_b' '/nix/store/47487aw770nm5iq41wgn556gz8d4zipb-tailwindcss-3.4.17' '/nix/store/5acgdhnifp5hsvhw2w34jhs5xqjgv0v3-direnv-2.35.0' '/nix/store/liqflvxvksmwmccjilmky0gwxmdk58x3-openssl-3.3.2-dev' '/nix/store/ppf3qysxs0689bjl8vjmmln4w456nvbm-openssl-3.3.2-bin' '/nix/store/5926bc2bqkr0882p4m6yq3wy5brnbwlv-openssl-3.3.2' '/nix/store/18vbfn81dywpj9l62j4hkswcjyzd9vvd-fontconfig-2.15.0-dev' '/nix/store/wy1fws8r7m3j9ivn8ha7vhyh9a40k1sa-freetype-2.13.3-dev' '/nix/store/qr0p57jasfpkcacypjsyi62f69vyad3q-zlib-1.3.1-dev' '/nix/store/zv9shv0566mrq0lvrws448rs52gc56k1-zlib-1.3.1' '/nix/store/vfmn4l91zkhyp5nkz7nyiyq7aza0gxrf-bzip2-1.0.8-dev' '/nix/store/j2w0ksqpakrb7rsdnhkid5r1wxs1p79i-bzip2-1.0.8-bin' '/nix/store/jhcqdd7rqcl0zxgbxx4m6jz3kd2026yw-bzip2-1.0.8' '/nix/store/6qshp6mlih60gwrp4qrh03czi11xa5f9-brotli-1.1.0-dev' '/nix/store/mzhn6vgk5g9p63gvzj7pgyia2mfp2glw-brotli-1.1.0-lib' '/nix/store/nf35c6arwgbny5qv956yb369gp3g7xjl-brotli-1.1.0' '/nix/store/5rvyn65jr9qcy1gcsz91zd3j5c65xjij-libpng-apng-1.6.43-dev' '/nix/store/m04yfi9gd23mjlwsarcwz955zbz4fgix-libpng-apng-1.6.43' '/nix/store/45qzsdh101r753bz6dmjj6f4y9gabxkf-freetype-2.13.3' '/nix/store/7z9ki4d55828iiqydf190fkbplyn1i12-fontconfig-2.15.0-bin' '/nix/store/9nm6pvkz2mphw5p6wzww9ld3xfs3pfad-fontconfig-2.15.0-lib' )
declare -a pkgsTargetTarget=()
declare -a postBuildHooks=('postBuildInstallFromCargoBuildLog' )
postBuildInstallFromCargoBuildLogOut='postBuildInstallFromCargoBuildLogOutTempB1c'
declare -a postFixupHooks=('_makeSymlinksRelativeInAllOutputs' '_multioutPropagateDev' )
declare -a postInstallHooks=('removeReferencesToRustToolchain' )
declare -a postPatchHooks=('configureCargoCommonVars' )
declare -a postUnpackHooks=('_updateSourceDateEpochFromSourceRoot' )
declare -a preConfigureHooks=('_multioutConfig' )
preConfigurePhases=' updateAutotoolsGnuConfigScriptsPhase'
declare -a preFixupHooks=('_moveToShare' '_multioutDocs' '_multioutDevs' )
preferLocalBuild='1'
export preferLocalBuild
prefix='/home/joost/git/leptos-spin-wasm/outputs/out'
declare -a propagatedBuildDepFiles=('propagated-build-build-deps' 'propagated-native-build-inputs' 'propagated-build-target-deps' )
propagatedBuildInputs=''
export propagatedBuildInputs
declare -a propagatedHostDepFiles=('propagated-host-host-deps' 'propagated-build-inputs' )
propagatedNativeBuildInputs=''
export propagatedNativeBuildInputs
declare -a propagatedTargetDepFiles=('propagated-target-target-deps' )
shell='/nix/store/4fvc5fm8bszmkydng1ivrvr5cbvr1g60-bash-5.2p37/bin/bash'
export shell
shellHook='echo "🦀 Welcome to the my-leptos-app development environment!"
'
export shellHook
stdenv='/nix/store/acjcsq0iim1lg14f8jvka05dhhz70c2c-stdenv-linux'
export stdenv
strictDeps=''
export strictDeps
system='x86_64-linux'
export system
declare -a unpackCmdHooks=('_defaultUnpack' )
_activatePkgs ()
{
 
    local hostOffset targetOffset;
    local pkg;
    for hostOffset in "${allPlatOffsets[@]}";
    do
        local pkgsVar="${pkgAccumVarVars[hostOffset + 1]}";
        for targetOffset in "${allPlatOffsets[@]}";
        do
            (( hostOffset <= targetOffset )) || continue;
            local pkgsRef="${pkgsVar}[$targetOffset - $hostOffset]";
            local pkgsSlice="${!pkgsRef}[@]";
            for pkg in ${!pkgsSlice+"${!pkgsSlice}"};
            do
                activatePackage "$pkg" "$hostOffset" "$targetOffset";
            done;
        done;
    done
}
_addRpathPrefix ()
{
 
    if [ "${NIX_NO_SELF_RPATH:-0}" != 1 ]; then
        export NIX_LDFLAGS="-rpath $1/lib ${NIX_LDFLAGS-}";
    fi
}
_addToEnv ()
{
 
    local depHostOffset depTargetOffset;
    local pkg;
    for depHostOffset in "${allPlatOffsets[@]}";
    do
        local hookVar="${pkgHookVarVars[depHostOffset + 1]}";
        local pkgsVar="${pkgAccumVarVars[depHostOffset + 1]}";
        for depTargetOffset in "${allPlatOffsets[@]}";
        do
            (( depHostOffset <= depTargetOffset )) || continue;
            local hookRef="${hookVar}[$depTargetOffset - $depHostOffset]";
            if [[ -z "${strictDeps-}" ]]; then
                local visitedPkgs="";
                for pkg in "${pkgsBuildBuild[@]}" "${pkgsBuildHost[@]}" "${pkgsBuildTarget[@]}" "${pkgsHostHost[@]}" "${pkgsHostTarget[@]}" "${pkgsTargetTarget[@]}";
                do
                    if [[ "$visitedPkgs" = *"$pkg"* ]]; then
                        continue;
                    fi;
                    runHook "${!hookRef}" "$pkg";
                    visitedPkgs+=" $pkg";
                done;
            else
                local pkgsRef="${pkgsVar}[$depTargetOffset - $depHostOffset]";
                local pkgsSlice="${!pkgsRef}[@]";
                for pkg in ${!pkgsSlice+"${!pkgsSlice}"};
                do
                    runHook "${!hookRef}" "$pkg";
                done;
            fi;
        done;
    done
}
_allFlags ()
{
 
    export system pname name version;
    while IFS='' read -r varName; do
        nixTalkativeLog "@${varName}@ -> ${!varName}";
        args+=("--subst-var" "$varName");
    done < <(awk 'BEGIN { for (v in ENVIRON) if (v ~ /^[a-z][a-zA-Z0-9_]*$/) print v }')
}
_assignFirst ()
{
 
    local varName="$1";
    local _var;
    local REMOVE=REMOVE;
    shift;
    for _var in "$@";
    do
        if [ -n "${!_var-}" ]; then
            eval "${varName}"="${_var}";
            return;
        fi;
    done;
    echo;
    echo "error: _assignFirst: could not find a non-empty variable whose name to assign to ${varName}.";
    echo "       The following variables were all unset or empty:";
    echo "           $*";
    if [ -z "${out:-}" ]; then
        echo '       If you do not want an "out" output in your derivation, make sure to define';
        echo '       the other specific required outputs. This can be achieved by picking one';
        echo "       of the above as an output.";
        echo '       You do not have to remove "out" if you want to have a different default';
        echo '       output, because the first output is taken as a default.';
        echo;
    fi;
    return 1
}
_callImplicitHook ()
{
 
    local def="$1";
    local hookName="$2";
    if declare -F "$hookName" > /dev/null; then
        nixTalkativeLog "calling implicit '$hookName' function hook";
        "$hookName";
    else
        if type -p "$hookName" > /dev/null; then
            nixTalkativeLog "sourcing implicit '$hookName' script hook";
            source "$hookName";
        else
            if [ -n "${!hookName:-}" ]; then
                nixTalkativeLog "evaling implicit '$hookName' string hook";
                eval "${!hookName}";
            else
                return "$def";
            fi;
        fi;
    fi
}
_defaultUnpack ()
{
 
    local fn="$1";
    local destination;
    if [ -d "$fn" ]; then
        destination="$(stripHash "$fn")";
        if [ -e "$destination" ]; then
            echo "Cannot copy $fn to $destination: destination already exists!";
            echo "Did you specify two \"srcs\" with the same \"name\"?";
            return 1;
        fi;
        cp -r --preserve=mode,timestamps --reflink=auto -- "$fn" "$destination";
    else
        case "$fn" in 
            *.tar.xz | *.tar.lzma | *.txz)
                ( XZ_OPT="--threads=$NIX_BUILD_CORES" xz -d < "$fn";
                true ) | tar xf - --mode=+w --warning=no-timestamp
            ;;
            *.tar | *.tar.* | *.tgz | *.tbz2 | *.tbz)
                tar xf "$fn" --mode=+w --warning=no-timestamp
            ;;
            *)
                return 1
            ;;
        esac;
    fi
}
_doStrip ()
{
 
    local -ra flags=(dontStripHost dontStripTarget);
    local -ra debugDirs=(stripDebugList stripDebugListTarget);
    local -ra allDirs=(stripAllList stripAllListTarget);
    local -ra stripCmds=(STRIP STRIP_FOR_TARGET);
    local -ra ranlibCmds=(RANLIB RANLIB_FOR_TARGET);
    stripDebugList=${stripDebugList[*]:-lib lib32 lib64 libexec bin sbin Applications Library/Frameworks};
    stripDebugListTarget=${stripDebugListTarget[*]:-};
    stripAllList=${stripAllList[*]:-};
    stripAllListTarget=${stripAllListTarget[*]:-};
    local i;
    for i in ${!stripCmds[@]};
    do
        local -n flag="${flags[$i]}";
        local -n debugDirList="${debugDirs[$i]}";
        local -n allDirList="${allDirs[$i]}";
        local -n stripCmd="${stripCmds[$i]}";
        local -n ranlibCmd="${ranlibCmds[$i]}";
        if [[ -n "${dontStrip-}" || -n "${flag-}" ]] || ! type -f "${stripCmd-}" 2> /dev/null 1>&2; then
            continue;
        fi;
        stripDirs "$stripCmd" "$ranlibCmd" "$debugDirList" "${stripDebugFlags[*]:--S -p}";
        stripDirs "$stripCmd" "$ranlibCmd" "$allDirList" "${stripAllFlags[*]:--s -p}";
    done
}
_eval ()
{
 
    if declare -F "$1" > /dev/null 2>&1; then
        "$@";
    else
        eval "$1";
    fi
}
_logHook ()
{
 
    if [[ -z ${NIX_LOG_FD-} ]]; then
        return;
    fi;
    local hookKind="$1";
    local hookExpr="$2";
    shift 2;
    if declare -F "$hookExpr" > /dev/null 2>&1; then
        nixTalkativeLog "calling '$hookKind' function hook '$hookExpr'" "$@";
    else
        if type -p "$hookExpr" > /dev/null; then
            nixTalkativeLog "sourcing '$hookKind' script hook '$hookExpr'";
        else
            if [[ "$hookExpr" != "_callImplicitHook"* ]]; then
                local exprToOutput;
                if [[ ${NIX_DEBUG:-0} -ge 5 ]]; then
                    exprToOutput="$hookExpr";
                else
                    local hookExprLine;
                    while IFS= read -r hookExprLine; do
                        hookExprLine="${hookExprLine#"${hookExprLine%%[![:space:]]*}"}";
                        if [[ -n "$hookExprLine" ]]; then
                            exprToOutput+="$hookExprLine\\n ";
                        fi;
                    done <<< "$hookExpr";
                    exprToOutput="${exprToOutput%%\\n }";
                fi;
                nixTalkativeLog "evaling '$hookKind' string hook '$exprToOutput'";
            fi;
        fi;
    fi
}
_makeSymlinksRelative ()
{
 
    local symlinkTarget;
    if [ "${dontRewriteSymlinks-}" ] || [ ! -e "$prefix" ]; then
        return;
    fi;
    while IFS= read -r -d '' f; do
        symlinkTarget=$(readlink "$f");
        if [[ "$symlinkTarget"/ != "$prefix"/* ]]; then
            continue;
        fi;
        if [ ! -e "$symlinkTarget" ]; then
            echo "the symlink $f is broken, it points to $symlinkTarget (which is missing)";
        fi;
        echo "rewriting symlink $f to be relative to $prefix";
        ln -snrf "$symlinkTarget" "$f";
    done < <(find $prefix -type l -print0)
}
_makeSymlinksRelativeInAllOutputs ()
{
 
    local output;
    for output in $(getAllOutputNames);
    do
        prefix="${!output}" _makeSymlinksRelative;
    done
}
_moveLib64 ()
{
 
    if [ "${dontMoveLib64-}" = 1 ]; then
        return;
    fi;
    if [ ! -e "$prefix/lib64" -o -L "$prefix/lib64" ]; then
        return;
    fi;
    echo "moving $prefix/lib64/* to $prefix/lib";
    mkdir -p $prefix/lib;
    shopt -s dotglob;
    for i in $prefix/lib64/*;
    do
        mv --no-clobber "$i" $prefix/lib;
    done;
    shopt -u dotglob;
    rmdir $prefix/lib64;
    ln -s lib $prefix/lib64
}
_moveSbin ()
{
 
    if [ "${dontMoveSbin-}" = 1 ]; then
        return;
    fi;
    if [ ! -e "$prefix/sbin" -o -L "$prefix/sbin" ]; then
        return;
    fi;
    echo "moving $prefix/sbin/* to $prefix/bin";
    mkdir -p $prefix/bin;
    shopt -s dotglob;
    for i in $prefix/sbin/*;
    do
        mv "$i" $prefix/bin;
    done;
    shopt -u dotglob;
    rmdir $prefix/sbin;
    ln -s bin $prefix/sbin
}
_moveSystemdUserUnits ()
{
 
    if [ "${dontMoveSystemdUserUnits:-0}" = 1 ]; then
        return;
    fi;
    if [ ! -e "${prefix:?}/lib/systemd/user" ]; then
        return;
    fi;
    local source="$prefix/lib/systemd/user";
    local target="$prefix/share/systemd/user";
    echo "moving $source/* to $target";
    mkdir -p "$target";
    ( shopt -s dotglob;
    for i in "$source"/*;
    do
        mv "$i" "$target";
    done );
    rmdir "$source";
    ln -s "$target" "$source"
}
_moveToShare ()
{
 
    if [ -n "$__structuredAttrs" ]; then
        if [ -z "${forceShare-}" ]; then
            forceShare=(man doc info);
        fi;
    else
        forceShare=(${forceShare:-man doc info});
    fi;
    if [[ -z "$out" ]]; then
        return;
    fi;
    for d in "${forceShare[@]}";
    do
        if [ -d "$out/$d" ]; then
            if [ -d "$out/share/$d" ]; then
                echo "both $d/ and share/$d/ exist!";
            else
                echo "moving $out/$d to $out/share/$d";
                mkdir -p $out/share;
                mv $out/$d $out/share/;
            fi;
        fi;
    done
}
_multioutConfig ()
{
 
    if [ "$(getAllOutputNames)" = "out" ] || [ -z "${setOutputFlags-1}" ]; then
        return;
    fi;
    if [ -z "${shareDocName:-}" ]; then
        local confScript="${configureScript:-}";
        if [ -z "$confScript" ] && [ -x ./configure ]; then
            confScript=./configure;
        fi;
        if [ -f "$confScript" ]; then
            local shareDocName="$(sed -n "s/^PACKAGE_TARNAME='\(.*\)'$/\1/p" < "$confScript")";
        fi;
        if [ -z "$shareDocName" ] || echo "$shareDocName" | grep -q '[^a-zA-Z0-9_-]'; then
            shareDocName="$(echo "$name" | sed 's/-[^a-zA-Z].*//')";
        fi;
    fi;
    prependToVar configureFlags --bindir="${!outputBin}"/bin --sbindir="${!outputBin}"/sbin --includedir="${!outputInclude}"/include --oldincludedir="${!outputInclude}"/include --mandir="${!outputMan}"/share/man --infodir="${!outputInfo}"/share/info --docdir="${!outputDoc}"/share/doc/"${shareDocName}" --libdir="${!outputLib}"/lib --libexecdir="${!outputLib}"/libexec --localedir="${!outputLib}"/share/locale;
    prependToVar installFlags pkgconfigdir="${!outputDev}"/lib/pkgconfig m4datadir="${!outputDev}"/share/aclocal aclocaldir="${!outputDev}"/share/aclocal
}
_multioutDevs ()
{
 
    if [ "$(getAllOutputNames)" = "out" ] || [ -z "${moveToDev-1}" ]; then
        return;
    fi;
    moveToOutput include "${!outputInclude}";
    moveToOutput lib/pkgconfig "${!outputDev}";
    moveToOutput share/pkgconfig "${!outputDev}";
    moveToOutput lib/cmake "${!outputDev}";
    moveToOutput share/aclocal "${!outputDev}";
    for f in "${!outputDev}"/{lib,share}/pkgconfig/*.pc;
    do
        echo "Patching '$f' includedir to output ${!outputInclude}";
        sed -i "/^includedir=/s,=\${prefix},=${!outputInclude}," "$f";
    done
}
_multioutDocs ()
{
 
    local REMOVE=REMOVE;
    moveToOutput share/info "${!outputInfo}";
    moveToOutput share/doc "${!outputDoc}";
    moveToOutput share/gtk-doc "${!outputDevdoc}";
    moveToOutput share/devhelp/books "${!outputDevdoc}";
    moveToOutput share/man "${!outputMan}";
    moveToOutput share/man/man3 "${!outputDevman}"
}
_multioutPropagateDev ()
{
 
    if [ "$(getAllOutputNames)" = "out" ]; then
        return;
    fi;
    local outputFirst;
    for outputFirst in $(getAllOutputNames);
    do
        break;
    done;
    local propagaterOutput="$outputDev";
    if [ -z "$propagaterOutput" ]; then
        propagaterOutput="$outputFirst";
    fi;
    if [ -z "${propagatedBuildOutputs+1}" ]; then
        local po_dirty="$outputBin $outputInclude $outputLib";
        set +o pipefail;
        propagatedBuildOutputs=`echo "$po_dirty"             | tr -s ' ' '\n' | grep -v -F "$propagaterOutput"             | sort -u | tr '\n' ' ' `;
        set -o pipefail;
    fi;
    if [ -z "$propagatedBuildOutputs" ]; then
        return;
    fi;
    mkdir -p "${!propagaterOutput}"/nix-support;
    for output in $propagatedBuildOutputs;
    do
        echo -n " ${!output}" >> "${!propagaterOutput}"/nix-support/propagated-build-inputs;
    done
}
_overrideFirst ()
{
 
    if [ -z "${!1-}" ]; then
        _assignFirst "$@";
    fi
}
_pruneLibtoolFiles ()
{
 
    if [ "${dontPruneLibtoolFiles-}" ] || [ ! -e "$prefix" ]; then
        return;
    fi;
    find "$prefix" -type f -name '*.la' -exec grep -q '^# Generated by .*libtool' {} \; -exec grep -q "^old_library=''" {} \; -exec sed -i {} -e "/^dependency_libs='[^']/ c dependency_libs='' #pruned" \;
}
_updateSourceDateEpochFromSourceRoot ()
{
 
    if [ -n "$sourceRoot" ]; then
        updateSourceDateEpoch "$sourceRoot";
    fi
}
activatePackage ()
{
 
    local pkg="$1";
    local -r hostOffset="$2";
    local -r targetOffset="$3";
    (( hostOffset <= targetOffset )) || exit 1;
    if [ -f "$pkg" ]; then
        nixTalkativeLog "sourcing setup hook '$pkg'";
        source "$pkg";
    fi;
    if [[ -z "${strictDeps-}" || "$hostOffset" -le -1 ]]; then
        addToSearchPath _PATH "$pkg/bin";
    fi;
    if (( hostOffset <= -1 )); then
        addToSearchPath _XDG_DATA_DIRS "$pkg/share";
    fi;
    if [[ "$hostOffset" -eq 0 && -d "$pkg/bin" ]]; then
        addToSearchPath _HOST_PATH "$pkg/bin";
    fi;
    if [[ -f "$pkg/nix-support/setup-hook" ]]; then
        nixTalkativeLog "sourcing setup hook '$pkg/nix-support/setup-hook'";
        source "$pkg/nix-support/setup-hook";
    fi
}
addEnvHooks ()
{
 
    local depHostOffset="$1";
    shift;
    local pkgHookVarsSlice="${pkgHookVarVars[$depHostOffset + 1]}[@]";
    local pkgHookVar;
    for pkgHookVar in "${!pkgHookVarsSlice}";
    do
        eval "${pkgHookVar}s"'+=("$@")';
    done
}
addNodePath ()
{
 
    addToSearchPath NODE_PATH "$1/lib/node_modules"
}
addPythonPath ()
{
 
    addToSearchPathWithCustomDelimiter : PYTHONPATH $1/lib/python3.12/site-packages
}
addToSearchPath ()
{
 
    addToSearchPathWithCustomDelimiter ":" "$@"
}
addToSearchPathWithCustomDelimiter ()
{
 
    local delimiter="$1";
    local varName="$2";
    local dir="$3";
    if [[ -d "$dir" && "${!varName:+${delimiter}${!varName}${delimiter}}" != *"${delimiter}${dir}${delimiter}"* ]]; then
        export "${varName}=${!varName:+${!varName}${delimiter}}${dir}";
    fi
}
appendToVar ()
{
 
    local -n nameref="$1";
    local useArray type;
    if [ -n "$__structuredAttrs" ]; then
        useArray=true;
    else
        useArray=false;
    fi;
    if type=$(declare -p "$1" 2> /dev/null); then
        case "${type#* }" in 
            -A*)
                echo "appendToVar(): ERROR: trying to use appendToVar on an associative array, use variable+=([\"X\"]=\"Y\") instead." 1>&2;
                return 1
            ;;
            -a*)
                useArray=true
            ;;
            *)
                useArray=false
            ;;
        esac;
    fi;
    shift;
    if $useArray; then
        nameref=(${nameref+"${nameref[@]}"} "$@");
    else
        nameref="${nameref-} $*";
    fi
}
auditTmpdir ()
{
 
    local dir="$1";
    [ -e "$dir" ] || return 0;
    echo "checking for references to $TMPDIR/ in $dir...";
    local i;
    find "$dir" -type f -print0 | while IFS= read -r -d '' i; do
        if [[ "$i" =~ .build-id ]]; then
            continue;
        fi;
        if isELF "$i"; then
            if { 
                printf :;
                patchelf --print-rpath "$i"
            } | grep -q -F ":$TMPDIR/"; then
                echo "RPATH of binary $i contains a forbidden reference to $TMPDIR/";
                exit 1;
            fi;
        fi;
        if isScript "$i"; then
            if [ -e "$(dirname "$i")/.$(basename "$i")-wrapped" ]; then
                if grep -q -F "$TMPDIR/" "$i"; then
                    echo "wrapper script $i contains a forbidden reference to $TMPDIR/";
                    exit 1;
                fi;
            fi;
        fi;
    done
}
bintoolsWrapper_addLDVars ()
{
 
    local role_post;
    getHostRoleEnvHook;
    if [[ -d "$1/lib64" && ! -L "$1/lib64" ]]; then
        export NIX_LDFLAGS${role_post}+=" -L$1/lib64";
    fi;
    if [[ -d "$1/lib" ]]; then
        local -a glob=($1/lib/lib*);
        if [ "${#glob[*]}" -gt 0 ]; then
            export NIX_LDFLAGS${role_post}+=" -L$1/lib";
        fi;
    fi
}
buildPhase ()
{
 
    runHook preBuild;
    if [[ -z "${makeFlags-}" && -z "${makefile:-}" && ! ( -e Makefile || -e makefile || -e GNUmakefile ) ]]; then
        echo "no Makefile or custom buildPhase, doing nothing";
    else
        foundMakefile=1;
        local flagsArray=(${enableParallelBuilding:+-j${NIX_BUILD_CORES}} SHELL="$SHELL");
        concatTo flagsArray makeFlags makeFlagsArray buildFlags buildFlagsArray;
        echoCmd 'build flags' "${flagsArray[@]}";
        make ${makefile:+-f $makefile} "${flagsArray[@]}";
        unset flagsArray;
    fi;
    runHook postBuild
}
cargo ()
{
 
    ( set -x;
    command cargo "$@" )
}
cargoWithProfile ()
{
 
    local profileArgs;
    if [[ "${CARGO_PROFILE}" == "release" ]]; then
        profileArgs="--release";
    else
        profileArgs="${CARGO_PROFILE:+--profile ${CARGO_PROFILE}}";
    fi;
    cargo "${@:1:1}" ${profileArgs} "${@:2}"
}
ccWrapper_addCVars ()
{
 
    local role_post;
    getHostRoleEnvHook;
    if [ -d "$1/include" ]; then
        export NIX_CFLAGS_COMPILE${role_post}+=" -isystem $1/include";
    fi;
    if [ -d "$1/Library/Frameworks" ]; then
        export NIX_CFLAGS_COMPILE${role_post}+=" -iframework $1/Library/Frameworks";
    fi
}
checkPhase ()
{
 
    runHook preCheck;
    if [[ -z "${foundMakefile:-}" ]]; then
        echo "no Makefile or custom checkPhase, doing nothing";
        runHook postCheck;
        return;
    fi;
    if [[ -z "${checkTarget:-}" ]]; then
        if make -n ${makefile:+-f $makefile} check > /dev/null 2>&1; then
            checkTarget="check";
        else
            if make -n ${makefile:+-f $makefile} test > /dev/null 2>&1; then
                checkTarget="test";
            fi;
        fi;
    fi;
    if [[ -z "${checkTarget:-}" ]]; then
        echo "no check/test target in ${makefile:-Makefile}, doing nothing";
    else
        local flagsArray=(${enableParallelChecking:+-j${NIX_BUILD_CORES}} SHELL="$SHELL");
        concatTo flagsArray makeFlags makeFlagsArray checkFlags=VERBOSE=y checkFlagsArray checkTarget;
        echoCmd 'check flags' "${flagsArray[@]}";
        make ${makefile:+-f $makefile} "${flagsArray[@]}";
        unset flagsArray;
    fi;
    runHook postCheck
}
compressAndInstallCargoArtifactsDir ()
{
 
    local dir="${1:?destination directory not defined}";
    local cargoTargetDir="${2:?cargoTargetDir not defined}";
    local prevArtifacts="${3}";
    mkdir -p "${dir}";
    local dest="${dir}/target.tar.zst";
    ( export SOURCE_DATE_EPOCH=1;
    function dynTar () 
    { 
        ( cd "${cargoTargetDir}";
        if [ -n "${doCompressAndInstallFullArchive}" ]; then
            echo "compressing and installing full archive of ${cargoTargetDir} to ${dest} as requested" 1>&2;
            tar "$@" .;
        else
            if [ "$(uname -s)" == "Darwin" ]; then
                echo "incremental zstd compression not currently supported on Darwin: https://github.com/rust-lang/rust/issues/115982" 1>&2;
                echo "doing a full archive install of ${cargoTargetDir} to ${dest}" 1>&2;
                tar "$@" .;
            else
                if [ -z "${prevArtifacts}" ]; then
                    echo "no previous artifacts found, compressing and installing full archive of ${cargoTargetDir} to ${dest}" 1>&2;
                    tar "$@" .;
                else
                    echo "linking previous artifacts ${prevArtifacts} to ${dest}" 1>&2;
                    ln -s "${prevArtifacts}" "${dest}.prev";
                    touch -d @${SOURCE_DATE_EPOCH} "${TMPDIR}/.crane.source-date-epoch";
                    tar --null --no-recursion -T <(find . -newer "${TMPDIR}/.crane.source-date-epoch" -print0) "$@";
                fi;
            fi;
        fi )
    };
    dynTar --sort=name --mtime="@${SOURCE_DATE_EPOCH}" --owner=0 --group=0 --mode=u+w --numeric-owner --pax-option=exthdr.name=%d/PaxHeaders/%f,delete=atime,delete=ctime -c | zstd "-T${NIX_BUILD_CORES:-0}" -o "${dest}" ${zstdCompressionExtraArgs:-} )
}
compressManPages ()
{
 
    local dir="$1";
    if [ -L "$dir"/share ] || [ -L "$dir"/share/man ] || [ ! -d "$dir/share/man" ]; then
        return;
    fi;
    echo "gzipping man pages under $dir/share/man/";
    find "$dir"/share/man/ -type f -a '!' -regex '.*\.\(bz2\|gz\|xz\)$' -print0 | while IFS= read -r -d '' f; do
        if gzip -c -n "$f" > "$f".gz; then
            rm "$f";
        else
            rm "$f".gz;
        fi;
    done;
    find "$dir"/share/man/ -type l -a '!' -regex '.*\.\(bz2\|gz\|xz\)$' -print0 | sort -z | while IFS= read -r -d '' f; do
        local target;
        target="$(readlink -f "$f")";
        if [ -f "$target".gz ]; then
            ln -sf "$target".gz "$f".gz && rm "$f";
        fi;
    done
}
concatStringsSep ()
{
 
    local sep="$1";
    local name="$2";
    local type oldifs;
    if type=$(declare -p "$name" 2> /dev/null); then
        local -n nameref="$name";
        case "${type#* }" in 
            -A*)
                echo "concatStringsSep(): ERROR: trying to use concatStringsSep on an associative array." 1>&2;
                return 1
            ;;
            -a*)
                local IFS="$(printf '\036')"
            ;;
            *)
                local IFS=" "
            ;;
        esac;
        local ifs_separated="${nameref[*]}";
        echo -n "${ifs_separated//"$IFS"/"$sep"}";
    fi
}
concatTo ()
{
 
    local -;
    set -o noglob;
    local -n targetref="$1";
    shift;
    local arg default name type;
    for arg in "$@";
    do
        IFS="=" read -r name default <<< "$arg";
        local -n nameref="$name";
        if [[ -z "${nameref[*]}" && -n "$default" ]]; then
            targetref+=("$default");
        else
            if type=$(declare -p "$name" 2> /dev/null); then
                case "${type#* }" in 
                    -A*)
                        echo "concatTo(): ERROR: trying to use concatTo on an associative array." 1>&2;
                        return 1
                    ;;
                    -a*)
                        targetref+=("${nameref[@]}")
                    ;;
                    *)
                        if [[ "$name" = *"Array" ]]; then
                            nixErrorLog "concatTo(): $name is not declared as array, treating as a singleton. This will become an error in future";
                            targetref+=(${nameref+"${nameref[@]}"});
                        else
                            targetref+=(${nameref-});
                        fi
                    ;;
                esac;
            fi;
        fi;
    done
}
configureCargoCommonVars ()
{
 
    echo "Executing configureCargoCommonVars";
    export CARGO_HOME=${CARGO_HOME:-${PWD}/.cargo-home};
    mkdir -p ${CARGO_HOME};
    export CARGO_BUILD_JOBS=${CARGO_BUILD_JOBS:-$NIX_BUILD_CORES};
    export RUST_TEST_THREADS=${RUST_TEST_THREADS:-$NIX_BUILD_CORES};
    export CARGO_BUILD_INCREMENTAL=${CARGO_BUILD_INCREMENTAL-false};
    CARGO_PROFILE=${CARGO_PROFILE-release}
}
configureCargoVendoredDepsHook ()
{
 
    local vendoredDir="${1:-${cargoVendorDir:?not defined}}";
    local cargoConfig="${2:-${CARGO_HOME:?not defined}/config.toml}";
    if [[ -f "${vendoredDir}/config.toml" ]]; then
        echo will append ${cargoConfig} with contents of ${vendoredDir}/config.toml;
        cat "${vendoredDir}/config.toml" >> "${cargoConfig}";
        return;
    fi;
    echo setting source replacement config in ${cargoConfig} using vendored directory ${vendoredDir};
    cat >> "${cargoConfig}" <<EOF

[source.crates-io]
replace-with = "nix-sources"
[source.nix-sources]
directory = "${vendoredDir}"
EOF

}
configurePhase ()
{
 
    runHook preConfigure;
    : "${configureScript=}";
    if [[ -z "$configureScript" && -x ./configure ]]; then
        configureScript=./configure;
    fi;
    if [ -z "${dontFixLibtool:-}" ]; then
        export lt_cv_deplibs_check_method="${lt_cv_deplibs_check_method-pass_all}";
        local i;
        find . -iname "ltmain.sh" -print0 | while IFS='' read -r -d '' i; do
            echo "fixing libtool script $i";
            fixLibtool "$i";
        done;
        CONFIGURE_MTIME_REFERENCE=$(mktemp configure.mtime.reference.XXXXXX);
        find . -executable -type f -name configure -exec grep -l 'GNU Libtool is free software; you can redistribute it and/or modify' {} \; -exec touch -r {} "$CONFIGURE_MTIME_REFERENCE" \; -exec sed -i s_/usr/bin/file_file_g {} \; -exec touch -r "$CONFIGURE_MTIME_REFERENCE" {} \;;
        rm -f "$CONFIGURE_MTIME_REFERENCE";
    fi;
    if [[ -z "${dontAddPrefix:-}" && -n "$prefix" ]]; then
        prependToVar configureFlags "${prefixKey:---prefix=}$prefix";
    fi;
    if [[ -f "$configureScript" ]]; then
        if [ -z "${dontAddDisableDepTrack:-}" ]; then
            if grep -q dependency-tracking "$configureScript"; then
                prependToVar configureFlags --disable-dependency-tracking;
            fi;
        fi;
        if [ -z "${dontDisableStatic:-}" ]; then
            if grep -q enable-static "$configureScript"; then
                prependToVar configureFlags --disable-static;
            fi;
        fi;
        if [ -z "${dontPatchShebangsInConfigure:-}" ]; then
            patchShebangs --build "$configureScript";
        fi;
    fi;
    if [ -n "$configureScript" ]; then
        local -a flagsArray;
        concatTo flagsArray configureFlags configureFlagsArray;
        echoCmd 'configure flags' "${flagsArray[@]}";
        $configureScript "${flagsArray[@]}";
        unset flagsArray;
    else
        echo "no configure script, doing nothing";
    fi;
    runHook postConfigure
}
consumeEntire ()
{
 
    if IFS='' read -r -d '' "$1"; then
        echo "consumeEntire(): ERROR: Input null bytes, won't process" 1>&2;
        return 1;
    fi
}
dedupAndInstallCargoArtifactsDir ()
{
 
    local dest="${1:?destination directory not defined}";
    local cargoTargetDir="${2:?cargoTargetDir not defined}";
    local prevCargoTargetDir="${3:?prevCargoTargetDir not defined}";
    mkdir -p "${dest}";
    if [ -d "${prevCargoTargetDir}" ]; then
        echo "symlinking duplicates in ${cargoTargetDir} to ${prevCargoTargetDir}";
        while read -r fullTargetFile; do
            local targetFile="${fullTargetFile#"${cargoTargetDir}"}";
            local candidateOrigFile="${prevCargoTargetDir}/${targetFile#/}";
            if cmp --silent "${candidateOrigFile}" "${fullTargetFile}"; then
                ln --symbolic --force --logical "${candidateOrigFile}" "${fullTargetFile}";
            fi;
        done < <(find "${cargoTargetDir}" -type f);
    fi;
    echo installing "${cargoTargetDir}" to "${dest}";
    mv "${cargoTargetDir}" --target-directory="${dest}"
}
distPhase ()
{
 
    runHook preDist;
    local flagsArray=();
    concatTo flagsArray distFlags distFlagsArray distTarget=dist;
    echo 'dist flags: %q' "${flagsArray[@]}";
    make ${makefile:+-f $makefile} "${flagsArray[@]}";
    if [ "${dontCopyDist:-0}" != 1 ]; then
        mkdir -p "$out/tarballs";
        cp -pvd ${tarballs[*]:-*.tar.gz} "$out/tarballs";
    fi;
    runHook postDist
}
dumpVars ()
{
 
    if [ "${noDumpEnvVars:-0}" != 1 ]; then
        { 
            install -m 0600 /dev/null "$NIX_BUILD_TOP/env-vars" && export 2> /dev/null >| "$NIX_BUILD_TOP/env-vars"
        } || true;
    fi
}
echoCmd ()
{
 
    printf "%s:" "$1";
    shift;
    printf ' %q' "$@";
    echo
}
exitHandler ()
{
 
    exitCode="$?";
    set +e;
    if [ -n "${showBuildStats:-}" ]; then
        read -r -d '' -a buildTimes < <(times);
        echo "build times:";
        echo "user time for the shell             ${buildTimes[0]}";
        echo "system time for the shell           ${buildTimes[1]}";
        echo "user time for all child processes   ${buildTimes[2]}";
        echo "system time for all child processes ${buildTimes[3]}";
    fi;
    if (( "$exitCode" != 0 )); then
        runHook failureHook;
        if [ -n "${succeedOnFailure:-}" ]; then
            echo "build failed with exit code $exitCode (ignored)";
            mkdir -p "$out/nix-support";
            printf "%s" "$exitCode" > "$out/nix-support/failed";
            exit 0;
        fi;
    else
        runHook exitHook;
    fi;
    return "$exitCode"
}
findInputs ()
{
 
    local -r pkg="$1";
    local -r hostOffset="$2";
    local -r targetOffset="$3";
    (( hostOffset <= targetOffset )) || exit 1;
    local varVar="${pkgAccumVarVars[hostOffset + 1]}";
    local varRef="$varVar[$((targetOffset - hostOffset))]";
    local var="${!varRef}";
    unset -v varVar varRef;
    local varSlice="$var[*]";
    case " ${!varSlice-} " in 
        *" $pkg "*)
            return 0
        ;;
    esac;
    unset -v varSlice;
    eval "$var"'+=("$pkg")';
    if ! [ -e "$pkg" ]; then
        echo "build input $pkg does not exist" 1>&2;
        exit 1;
    fi;
    function mapOffset () 
    { 
        local -r inputOffset="$1";
        local -n outputOffset="$2";
        if (( inputOffset <= 0 )); then
            outputOffset=$((inputOffset + hostOffset));
        else
            outputOffset=$((inputOffset - 1 + targetOffset));
        fi
    };
    local relHostOffset;
    for relHostOffset in "${allPlatOffsets[@]}";
    do
        local files="${propagatedDepFilesVars[relHostOffset + 1]}";
        local hostOffsetNext;
        mapOffset "$relHostOffset" hostOffsetNext;
        (( -1 <= hostOffsetNext && hostOffsetNext <= 1 )) || continue;
        local relTargetOffset;
        for relTargetOffset in "${allPlatOffsets[@]}";
        do
            (( "$relHostOffset" <= "$relTargetOffset" )) || continue;
            local fileRef="${files}[$relTargetOffset - $relHostOffset]";
            local file="${!fileRef}";
            unset -v fileRef;
            local targetOffsetNext;
            mapOffset "$relTargetOffset" targetOffsetNext;
            (( -1 <= hostOffsetNext && hostOffsetNext <= 1 )) || continue;
            [[ -f "$pkg/nix-support/$file" ]] || continue;
            local pkgNext;
            read -r -d '' pkgNext < "$pkg/nix-support/$file" || true;
            for pkgNext in $pkgNext;
            do
                findInputs "$pkgNext" "$hostOffsetNext" "$targetOffsetNext";
            done;
        done;
    done
}
fixLibtool ()
{
 
    local search_path;
    for flag in $NIX_LDFLAGS;
    do
        case $flag in 
            -L*)
                search_path+=" ${flag#-L}"
            ;;
        esac;
    done;
    sed -i "$1" -e "s^eval \(sys_lib_search_path=\).*^\1'${search_path:-}'^" -e 's^eval sys_lib_.+search_path=.*^^'
}
fixupPhase ()
{
 
    local output;
    for output in $(getAllOutputNames);
    do
        if [ -e "${!output}" ]; then
            chmod -R u+w,u-s,g-s "${!output}";
        fi;
    done;
    runHook preFixup;
    local output;
    for output in $(getAllOutputNames);
    do
        prefix="${!output}" runHook fixupOutput;
    done;
    recordPropagatedDependencies;
    if [ -n "${setupHook:-}" ]; then
        mkdir -p "${!outputDev}/nix-support";
        substituteAll "$setupHook" "${!outputDev}/nix-support/setup-hook";
    fi;
    if [ -n "${setupHooks:-}" ]; then
        mkdir -p "${!outputDev}/nix-support";
        local hook;
        for hook in ${setupHooks[@]};
        do
            local content;
            consumeEntire content < "$hook";
            substituteAllStream content "file '$hook'" >> "${!outputDev}/nix-support/setup-hook";
            unset -v content;
        done;
        unset -v hook;
    fi;
    if [ -n "${propagatedUserEnvPkgs:-}" ]; then
        mkdir -p "${!outputBin}/nix-support";
        printWords $propagatedUserEnvPkgs > "${!outputBin}/nix-support/propagated-user-env-packages";
    fi;
    runHook postFixup
}
genericBuild ()
{
 
    export GZIP_NO_TIMESTAMPS=1;
    if [ -f "${buildCommandPath:-}" ]; then
        source "$buildCommandPath";
        return;
    fi;
    if [ -n "${buildCommand:-}" ]; then
        eval "$buildCommand";
        return;
    fi;
    if [ -z "${phases[*]:-}" ]; then
        phases="${prePhases[*]:-} unpackPhase patchPhase ${preConfigurePhases[*]:-}             configurePhase ${preBuildPhases[*]:-} buildPhase checkPhase             ${preInstallPhases[*]:-} installPhase ${preFixupPhases[*]:-} fixupPhase installCheckPhase             ${preDistPhases[*]:-} distPhase ${postPhases[*]:-}";
    fi;
    for curPhase in ${phases[*]};
    do
        runPhase "$curPhase";
    done
}
getAllOutputNames ()
{
 
    if [ -n "$__structuredAttrs" ]; then
        echo "${!outputs[*]}";
    else
        echo "$outputs";
    fi
}
getHostRole ()
{
 
    getRole "$hostOffset"
}
getHostRoleEnvHook ()
{
 
    getRole "$depHostOffset"
}
getRole ()
{
 
    case $1 in 
        -1)
            role_post='_FOR_BUILD'
        ;;
        0)
            role_post=''
        ;;
        1)
            role_post='_FOR_TARGET'
        ;;
        *)
            echo "binutils-wrapper-2.43.1: used as improper sort of dependency" 1>&2;
            return 1
        ;;
    esac
}
getTargetRole ()
{
 
    getRole "$targetOffset"
}
getTargetRoleEnvHook ()
{
 
    getRole "$depTargetOffset"
}
getTargetRoleWrapper ()
{
 
    case $targetOffset in 
        -1)
            export NIX_BINTOOLS_WRAPPER_TARGET_BUILD_x86_64_unknown_linux_gnu=1
        ;;
        0)
            export NIX_BINTOOLS_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu=1
        ;;
        1)
            export NIX_BINTOOLS_WRAPPER_TARGET_TARGET_x86_64_unknown_linux_gnu=1
        ;;
        *)
            echo "binutils-wrapper-2.43.1: used as improper sort of dependency" 1>&2;
            return 1
        ;;
    esac
}
inheritCargoArtifacts ()
{
 
    local preparedArtifacts="${1:-${cargoArtifacts:?not defined}}";
    local cargoTargetDir="${2:-${CARGO_TARGET_DIR:-target}}";
    if [ -d "${preparedArtifacts}" ]; then
        local candidateTarZst="${preparedArtifacts}/target.tar.zst";
        local candidateTargetDir="${preparedArtifacts}/target";
        if [ -f "${candidateTarZst}" ]; then
            local preparedArtifacts="${candidateTarZst}";
        else
            if [ -d "${candidateTargetDir}" ]; then
                local preparedArtifacts="${candidateTargetDir}";
            fi;
        fi;
    fi;
    mkdir -p "${cargoTargetDir}";
    if [ -f "${preparedArtifacts}" ]; then
        local prevArtifactsCandidate="${preparedArtifacts}.prev";
        if [ -f "${prevArtifactsCandidate:-}" ]; then
            inheritCargoArtifacts "$(realpath "${prevArtifactsCandidate}")" "$cargoTargetDir";
        fi;
        echo "decompressing cargo artifacts from ${preparedArtifacts} to ${cargoTargetDir}";
        mkdir -p "${cargoTargetDir}";
        zstd -d "${preparedArtifacts}" --stdout | tar -x -C "${cargoTargetDir}";
    else
        if [ -d "${preparedArtifacts}" ]; then
            echo "copying cargo artifacts from ${preparedArtifacts} to ${cargoTargetDir}";
            if [ -n "${doNotLinkInheritedArtifacts}" ]; then
                echo 'will deep copy artifacts (instead of symlinking) as requested';
                cp -r "${preparedArtifacts}" --dereference --no-target-directory "${cargoTargetDir}" --preserve=timestamps --no-preserve=ownership;
                chmod -R u+w "${cargoTargetDir}";
                find "${cargoTargetDir}" -name '.cargo-lock' -delete;
            else
                rsync --recursive --links --times --chmod=u+w --executability --exclude 'deps/*.rlib' --exclude 'deps/*.rmeta' "${preparedArtifacts}/" "${cargoTargetDir}/";
                find "${cargoTargetDir}" -name '.cargo-lock' -delete -execdir bash -c '
         for f in *.d; do
           cp --preserve=timestamps --no-preserve=ownership --remove-destination "$(readlink "${f}")" "${f}"
           chmod u+w "${f}"
         done
       ' \;;
                local linkCandidates=$(mktemp linkCandidatesXXXX.txt);
                find "${preparedArtifacts}" '(' -path '*/deps/*.rlib' -or -path '*/deps/*.rmeta' ')' -printf "%P\n" > "${linkCandidates}";
                cat "${linkCandidates}" | xargs --no-run-if-empty -n1 dirname | sort -u | ( cd "${cargoTargetDir}";
                xargs --no-run-if-empty mkdir -p );
                cat "${linkCandidates}" | xargs -P ${NIX_BUILD_CORES} -I '##{}##' ln -s "${preparedArtifacts}/##{}##" "${cargoTargetDir}/##{}##";
            fi;
        else
            echo unable to copy cargo artifacts, \"${preparedArtifacts}\" looks invalid;
            false;
        fi;
    fi
}
installCheckPhase ()
{
 
    runHook preInstallCheck;
    if [[ -z "${foundMakefile:-}" ]]; then
        echo "no Makefile or custom installCheckPhase, doing nothing";
    else
        if [[ -z "${installCheckTarget:-}" ]] && ! make -n ${makefile:+-f $makefile} "${installCheckTarget:-installcheck}" > /dev/null 2>&1; then
            echo "no installcheck target in ${makefile:-Makefile}, doing nothing";
        else
            local flagsArray=(${enableParallelChecking:+-j${NIX_BUILD_CORES}} SHELL="$SHELL");
            concatTo flagsArray makeFlags makeFlagsArray installCheckFlags installCheckFlagsArray installCheckTarget=installcheck;
            echoCmd 'installcheck flags' "${flagsArray[@]}";
            make ${makefile:+-f $makefile} "${flagsArray[@]}";
            unset flagsArray;
        fi;
    fi;
    runHook postInstallCheck
}
installFromCargoBuildLog ()
{
 
    ( local dest=${1:-${out}};
    local log=${2:-${cargoBuildLog:?not defined}};
    if ! [ -f "${log}" ]; then
        echo unable to install, cargo build log does not exist at: ${log};
        false;
    fi;
    echo searching for bins/libs to install from cargo build log at ${log};
    local logs;
    logs=$(/nix/store/69msxmwsxfbxx8mzigzrfppgz6qk1sx8-jq-1.7.1-bin/bin/jq -R 'fromjson?' < "${log}");
    local select_non_deps_artifact='select(contains("/deps/artifact/") | not)';
    local members="$(command cargo metadata --format-version 1 | /nix/store/69msxmwsxfbxx8mzigzrfppgz6qk1sx8-jq-1.7.1-bin/bin/jq -c '.workspace_members')";
    local select_non_test_members='select(.reason == "compiler-artifact" and .profile.test == false)
    | select(.package_id as $pid
      | '"${members}"'
      | contains([$pid])
    )';
    local select_bins="${select_non_test_members}| .executable | select(.!= null) | ${select_non_deps_artifact}";
    local select_lib_files="${select_non_test_members}"'
    | select(.target.kind
        | contains(["cdylib"])
        or contains(["dylib"])
        or contains(["staticlib"])
    )
    | .filenames[]
    | select(endswith(".rlib") | not)
    | '"${select_non_deps_artifact}";
    function installArtifacts () 
    { 
        local loc=${1?:missing};
        mkdir -p "${loc}";
        while IFS= read -r to_install; do
            echo installing ${to_install} in "${loc}";
            cp "${to_install}" "${loc}";
        done;
        rmdir --ignore-fail-on-non-empty "${loc}"
    };
    echo "${logs}" | /nix/store/69msxmwsxfbxx8mzigzrfppgz6qk1sx8-jq-1.7.1-bin/bin/jq -r "${select_lib_files}" | installArtifacts "${dest}/lib";
    echo "${logs}" | /nix/store/69msxmwsxfbxx8mzigzrfppgz6qk1sx8-jq-1.7.1-bin/bin/jq -r "${select_bins}" | installArtifacts "${dest}/bin";
    echo searching for bins/libs complete )
}
installPhase ()
{
 
    runHook preInstall;
    if [[ -z "${makeFlags-}" && -z "${makefile:-}" && ! ( -e Makefile || -e makefile || -e GNUmakefile ) ]]; then
        echo "no Makefile or custom installPhase, doing nothing";
        runHook postInstall;
        return;
    else
        foundMakefile=1;
    fi;
    if [ -n "$prefix" ]; then
        mkdir -p "$prefix";
    fi;
    local flagsArray=(${enableParallelInstalling:+-j${NIX_BUILD_CORES}} SHELL="$SHELL");
    concatTo flagsArray makeFlags makeFlagsArray installFlags installFlagsArray installTargets=install;
    echoCmd 'install flags' "${flagsArray[@]}";
    make ${makefile:+-f $makefile} "${flagsArray[@]}";
    unset flagsArray;
    runHook postInstall
}
isELF ()
{
 
    local fn="$1";
    local fd;
    local magic;
    exec {fd}< "$fn";
    read -r -n 4 -u "$fd" magic;
    exec {fd}>&-;
    if [ "$magic" = 'ELF' ]; then
        return 0;
    else
        return 1;
    fi
}
isMachO ()
{
 
    local fn="$1";
    local fd;
    local magic;
    exec {fd}< "$fn";
    read -r -n 4 -u "$fd" magic;
    exec {fd}>&-;
    if [[ "$magic" = $(echo -ne "\xfe\xed\xfa\xcf") || "$magic" = $(echo -ne "\xcf\xfa\xed\xfe") ]]; then
        return 0;
    else
        if [[ "$magic" = $(echo -ne "\xfe\xed\xfa\xce") || "$magic" = $(echo -ne "\xce\xfa\xed\xfe") ]]; then
            return 0;
        else
            if [[ "$magic" = $(echo -ne "\xca\xfe\xba\xbe") || "$magic" = $(echo -ne "\xbe\xba\xfe\xca") ]]; then
                return 0;
            else
                return 1;
            fi;
        fi;
    fi
}
isScript ()
{
 
    local fn="$1";
    local fd;
    local magic;
    exec {fd}< "$fn";
    read -r -n 2 -u "$fd" magic;
    exec {fd}>&-;
    if [[ "$magic" =~ \#! ]]; then
        return 0;
    else
        return 1;
    fi
}
mapOffset ()
{
 
    local -r inputOffset="$1";
    local -n outputOffset="$2";
    if (( inputOffset <= 0 )); then
        outputOffset=$((inputOffset + hostOffset));
    else
        outputOffset=$((inputOffset - 1 + targetOffset));
    fi
}
moveToOutput ()
{
 
    local patt="$1";
    local dstOut="$2";
    local output;
    for output in $(getAllOutputNames);
    do
        if [ "${!output}" = "$dstOut" ]; then
            continue;
        fi;
        local srcPath;
        for srcPath in "${!output}"/$patt;
        do
            if [ ! -e "$srcPath" ] && [ ! -L "$srcPath" ]; then
                continue;
            fi;
            if [ "$dstOut" = REMOVE ]; then
                echo "Removing $srcPath";
                rm -r "$srcPath";
            else
                local dstPath="$dstOut${srcPath#${!output}}";
                echo "Moving $srcPath to $dstPath";
                if [ -d "$dstPath" ] && [ -d "$srcPath" ]; then
                    rmdir "$srcPath" --ignore-fail-on-non-empty;
                    if [ -d "$srcPath" ]; then
                        mv -t "$dstPath" "$srcPath"/*;
                        rmdir "$srcPath";
                    fi;
                else
                    mkdir -p "$(readlink -m "$dstPath/..")";
                    mv "$srcPath" "$dstPath";
                fi;
            fi;
            local srcParent="$(readlink -m "$srcPath/..")";
            if [ -n "$(find "$srcParent" -maxdepth 0 -type d -empty 2> /dev/null)" ]; then
                echo "Removing empty $srcParent/ and (possibly) its parents";
                rmdir -p --ignore-fail-on-non-empty "$srcParent" 2> /dev/null || true;
            fi;
        done;
    done
}
nixChattyLog ()
{
 
    if [[ -z ${NIX_LOG_FD-} ]] || [[ ${NIX_DEBUG:-0} -lt 5 ]]; then
        return;
    fi;
    printf "%s\n" "$*" >&"$NIX_LOG_FD"
}
nixDebugLog ()
{
 
    if [[ -z ${NIX_LOG_FD-} ]] || [[ ${NIX_DEBUG:-0} -lt 6 ]]; then
        return;
    fi;
    printf "%s\n" "$*" >&"$NIX_LOG_FD"
}
nixErrorLog ()
{
 
    if [[ -z ${NIX_LOG_FD-} ]] || [[ ${NIX_DEBUG:-0} -lt 0 ]]; then
        return;
    fi;
    printf "%s\n" "$*" >&"$NIX_LOG_FD"
}
nixInfoLog ()
{
 
    if [[ -z ${NIX_LOG_FD-} ]] || [[ ${NIX_DEBUG:-0} -lt 3 ]]; then
        return;
    fi;
    printf "%s\n" "$*" >&"$NIX_LOG_FD"
}
nixNoticeLog ()
{
 
    if [[ -z ${NIX_LOG_FD-} ]] || [[ ${NIX_DEBUG:-0} -lt 2 ]]; then
        return;
    fi;
    printf "%s\n" "$*" >&"$NIX_LOG_FD"
}
nixTalkativeLog ()
{
 
    if [[ -z ${NIX_LOG_FD-} ]] || [[ ${NIX_DEBUG:-0} -lt 4 ]]; then
        return;
    fi;
    printf "%s\n" "$*" >&"$NIX_LOG_FD"
}
nixVomitLog ()
{
 
    if [[ -z ${NIX_LOG_FD-} ]] || [[ ${NIX_DEBUG:-0} -lt 7 ]]; then
        return;
    fi;
    printf "%s\n" "$*" >&"$NIX_LOG_FD"
}
nixWarnLog ()
{
 
    if [[ -z ${NIX_LOG_FD-} ]] || [[ ${NIX_DEBUG:-0} -lt 1 ]]; then
        return;
    fi;
    printf "%s\n" "$*" >&"$NIX_LOG_FD"
}
patchELF ()
{
 
    local dir="$1";
    [ -e "$dir" ] || return 0;
    echo "shrinking RPATHs of ELF executables and libraries in $dir";
    local i;
    while IFS= read -r -d '' i; do
        if [[ "$i" =~ .build-id ]]; then
            continue;
        fi;
        if ! isELF "$i"; then
            continue;
        fi;
        echo "shrinking $i";
        patchelf --shrink-rpath "$i" || true;
    done < <(find "$dir" -type f -print0)
}
patchPhase ()
{
 
    runHook prePatch;
    local -a patchesArray;
    concatTo patchesArray patches;
    for i in "${patchesArray[@]}";
    do
        echo "applying patch $i";
        local uncompress=cat;
        case "$i" in 
            *.gz)
                uncompress="gzip -d"
            ;;
            *.bz2)
                uncompress="bzip2 -d"
            ;;
            *.xz)
                uncompress="xz -d"
            ;;
            *.lzma)
                uncompress="lzma -d"
            ;;
        esac;
        local -a flagsArray;
        concatTo flagsArray patchFlags=-p1;
        $uncompress < "$i" 2>&1 | patch "${flagsArray[@]}";
    done;
    runHook postPatch
}
patchShebangs ()
{
 
    local pathName;
    local update=false;
    while [[ $# -gt 0 ]]; do
        case "$1" in 
            --host)
                pathName=HOST_PATH;
                shift
            ;;
            --build)
                pathName=PATH;
                shift
            ;;
            --update)
                update=true;
                shift
            ;;
            --)
                shift;
                break
            ;;
            -* | --*)
                echo "Unknown option $1 supplied to patchShebangs" 1>&2;
                return 1
            ;;
            *)
                break
            ;;
        esac;
    done;
    echo "patching script interpreter paths in $@";
    local f;
    local oldPath;
    local newPath;
    local arg0;
    local args;
    local oldInterpreterLine;
    local newInterpreterLine;
    if [[ $# -eq 0 ]]; then
        echo "No arguments supplied to patchShebangs" 1>&2;
        return 0;
    fi;
    local f;
    while IFS= read -r -d '' f; do
        isScript "$f" || continue;
        read -r oldInterpreterLine < "$f" || [ "$oldInterpreterLine" ];
        read -r oldPath arg0 args <<< "${oldInterpreterLine:2}";
        if [[ -z "${pathName:-}" ]]; then
            if [[ -n $strictDeps && $f == "$NIX_STORE"* ]]; then
                pathName=HOST_PATH;
            else
                pathName=PATH;
            fi;
        fi;
        if [[ "$oldPath" == *"/bin/env" ]]; then
            if [[ $arg0 == "-S" ]]; then
                arg0=${args%% *};
                args=${args#* };
                newPath="$(PATH="${!pathName}" type -P "env" || true)";
                args="-S $(PATH="${!pathName}" type -P "$arg0" || true) $args";
            else
                if [[ $arg0 == "-"* || $arg0 == *"="* ]]; then
                    echo "$f: unsupported interpreter directive \"$oldInterpreterLine\" (set dontPatchShebangs=1 and handle shebang patching yourself)" 1>&2;
                    exit 1;
                else
                    newPath="$(PATH="${!pathName}" type -P "$arg0" || true)";
                fi;
            fi;
        else
            if [[ -z $oldPath ]]; then
                oldPath="/bin/sh";
            fi;
            newPath="$(PATH="${!pathName}" type -P "$(basename "$oldPath")" || true)";
            args="$arg0 $args";
        fi;
        newInterpreterLine="$newPath $args";
        newInterpreterLine=${newInterpreterLine%${newInterpreterLine##*[![:space:]]}};
        if [[ -n "$oldPath" && ( "$update" == true || "${oldPath:0:${#NIX_STORE}}" != "$NIX_STORE" ) ]]; then
            if [[ -n "$newPath" && "$newPath" != "$oldPath" ]]; then
                echo "$f: interpreter directive changed from \"$oldInterpreterLine\" to \"$newInterpreterLine\"";
                escapedInterpreterLine=${newInterpreterLine//\\/\\\\};
                timestamp=$(stat --printf "%y" "$f");
                sed -i -e "1 s|.*|#\!$escapedInterpreterLine|" "$f";
                touch --date "$timestamp" "$f";
            fi;
        fi;
    done < <(find "$@" -type f -perm -0100 -print0)
}
patchShebangsAuto ()
{
 
    if [[ -z "${dontPatchShebangs-}" && -e "$prefix" ]]; then
        if [[ "$output" != out && "$output" = "$outputDev" ]]; then
            patchShebangs --build "$prefix";
        else
            patchShebangs --host "$prefix";
        fi;
    fi
}
pkgConfigWrapper_addPkgConfigPath ()
{
 
    local role_post;
    getHostRoleEnvHook;
    addToSearchPath "PKG_CONFIG_PATH${role_post}" "$1/lib/pkgconfig";
    addToSearchPath "PKG_CONFIG_PATH${role_post}" "$1/share/pkgconfig"
}
postBuildInstallFromCargoBuildLog ()
{
 
    ( if [ -n "${cargoBuildLog:-}" -a -f "${cargoBuildLog}" ]; then
        installFromCargoBuildLog "${postBuildInstallFromCargoBuildLogOut}" "${cargoBuildLog}";
    else
        cat <<-'EOF'
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
$cargoBuildLog is either undefined or does not point to a valid file location!
By default the installFromCargoBuildLogHook will expect that cargo's output
was captured and can be used to determine which binaries should be installed
(instead of just guessing based on what is present in cargo's target directory)

If you are defining your own custom build step, you have two options:
1. Set `doNotPostBuildInstallCargoBinaries = true;` and ensure the installation
   steps are handled as appropriate.
2. ensure that cargo's build log is captured in a file and point $cargoBuildLog at it

At a minimum, the latter option can be achieved with a build phase that runs:
     cargoBuildLog=$(mktemp cargoBuildLogXXXX.json)
     cargo build --release --message-format json-render-diagnostics >"$cargoBuildLog"
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
EOF

        false;
    fi )
}
prepareAndInstallCargoArtifactsDir ()
{
 
    local dir="${1:-${out}}";
    local cargoTargetDir="${2:-${CARGO_TARGET_DIR:-target}}";
    local mode="${3:-${installCargoArtifactsMode:-use-zstd}}";
    local prevCargoArtifacts="${4:-${cargoArtifacts:""}}";
    mkdir -p "${dir}";
    case "${mode}" in 
        "use-zstd")
            local prevCandidateTarZst="${prevCargoArtifacts}/target.tar.zst";
            if [ -f "${prevCandidateTarZst}" ]; then
                local prevCargoArtifacts="${prevCandidateTarZst}";
            fi;
            compressAndInstallCargoArtifactsDir "${dir}" "${cargoTargetDir}" "${prevCargoArtifacts}"
        ;;
        "use-symlink")
            local prevCargoTargetDir="/dev/null";
            if [ -n "${prevCargoArtifacts}" ] && [ -d "${prevCargoArtifacts}/target" ]; then
                local prevCargoTargetDir="${prevCargoArtifacts}/target";
            fi;
            dedupAndInstallCargoArtifactsDir "${dir}" "${cargoTargetDir}" "${prevCargoTargetDir}"
        ;;
        *)
            echo "unknown mode: \"${mode}\"";
            false
        ;;
    esac
}
prependToVar ()
{
 
    local -n nameref="$1";
    local useArray type;
    if [ -n "$__structuredAttrs" ]; then
        useArray=true;
    else
        useArray=false;
    fi;
    if type=$(declare -p "$1" 2> /dev/null); then
        case "${type#* }" in 
            -A*)
                echo "prependToVar(): ERROR: trying to use prependToVar on an associative array." 1>&2;
                return 1
            ;;
            -a*)
                useArray=true
            ;;
            *)
                useArray=false
            ;;
        esac;
    fi;
    shift;
    if $useArray; then
        nameref=("$@" ${nameref+"${nameref[@]}"});
    else
        nameref="$* ${nameref-}";
    fi
}
printLines ()
{
 
    (( "$#" > 0 )) || return 0;
    printf '%s\n' "$@"
}
printWords ()
{
 
    (( "$#" > 0 )) || return 0;
    printf '%s ' "$@"
}
recordPropagatedDependencies ()
{
 
    declare -ra flatVars=(depsBuildBuildPropagated propagatedNativeBuildInputs depsBuildTargetPropagated depsHostHostPropagated propagatedBuildInputs depsTargetTargetPropagated);
    declare -ra flatFiles=("${propagatedBuildDepFiles[@]}" "${propagatedHostDepFiles[@]}" "${propagatedTargetDepFiles[@]}");
    local propagatedInputsIndex;
    for propagatedInputsIndex in "${!flatVars[@]}";
    do
        local propagatedInputsSlice="${flatVars[$propagatedInputsIndex]}[@]";
        local propagatedInputsFile="${flatFiles[$propagatedInputsIndex]}";
        [[ -n "${!propagatedInputsSlice}" ]] || continue;
        mkdir -p "${!outputDev}/nix-support";
        printWords ${!propagatedInputsSlice} > "${!outputDev}/nix-support/$propagatedInputsFile";
    done
}
removeReferencesToRustToolchain ()
{
 
    local installLocation="${1:-${out:?not defined}}";
    echo "stripping references to Rust toolchain";
    local rustToolchainLocation rustToolchainStoreHash;
    rustToolchainLocation=$(rustc --print sysroot);
    echo "Rust toolchain at: $rustToolchainLocation";
    rustToolchainStoreHash=$(echo "$rustToolchainLocation" | grep --only-matching '/nix/store/[a-z0-9]\{32\}');
    find "${installLocation}" -type f | xargs --no-run-if-empty sed -i'' "s|${rustToolchainStoreHash}|/nix/store/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee|g";
    echo "stripping Rust toolchain references done"
}
removeReferencesToVendoredSources ()
{
 
    local installLocation="${1:-${out:?not defined}}";
    local vendoredDir="${2:-${cargoVendorDir:?not defined}}";
    ( exec 3>&1;
    echo stripping references to cargoVendorDir from:;
    find "${installLocation}" -type f | sort | tee -a >(cat 1>&3) | xargs --no-run-if-empty sed -i'' -f <(echo -n 's!/nix/store/\(eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee'
( echo "${vendoredDir}"
find -L "${vendoredDir}" -mindepth 1 -maxdepth 1 -type d | xargs -I DIR find -H DIR -type l -exec readlink '{}' \; ) | grep --only-matching '/nix/store/[a-z0-9]\{32\}' | sort -u | while read crateSource; do
    echo -n '\|'"${crateSource#/nix/store/}";
done || true
echo -n '\)!/nix/store/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee!g');
    echo stripping references done )
}
replaceCargoLock ()
{
 
    local cargoLockOverride="${1:-${cargoLock:?not defined}}";
    if [[ -f Cargo.lock ]]; then
        echo "moving Cargo.lock to Cargo.lock.orig, then will use ${cargoLockOverride} as Cargo.lock";
        mv Cargo.lock Cargo.lock.orig;
    else
        echo "will use ${cargoLockOverride} as Cargo.lock";
    fi;
    cp --no-preserve=ownership,mode "${cargoLock}" Cargo.lock
}
runHook ()
{
 
    local hookName="$1";
    shift;
    local hooksSlice="${hookName%Hook}Hooks[@]";
    local hook;
    for hook in "_callImplicitHook 0 $hookName" ${!hooksSlice+"${!hooksSlice}"};
    do
        _logHook "$hookName" "$hook" "$@";
        _eval "$hook" "$@";
    done;
    return 0
}
runOneHook ()
{
 
    local hookName="$1";
    shift;
    local hooksSlice="${hookName%Hook}Hooks[@]";
    local hook ret=1;
    for hook in "_callImplicitHook 1 $hookName" ${!hooksSlice+"${!hooksSlice}"};
    do
        _logHook "$hookName" "$hook" "$@";
        if _eval "$hook" "$@"; then
            ret=0;
            break;
        fi;
    done;
    return "$ret"
}
runPhase ()
{
 
    local curPhase="$*";
    if [[ "$curPhase" = unpackPhase && -n "${dontUnpack:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = patchPhase && -n "${dontPatch:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = configurePhase && -n "${dontConfigure:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = buildPhase && -n "${dontBuild:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = checkPhase && -z "${doCheck:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = installPhase && -n "${dontInstall:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = fixupPhase && -n "${dontFixup:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = installCheckPhase && -z "${doInstallCheck:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = distPhase && -z "${doDist:-}" ]]; then
        return;
    fi;
    showPhaseHeader "$curPhase";
    dumpVars;
    local startTime endTime;
    startTime=$(date +"%s");
    eval "${!curPhase:-$curPhase}";
    endTime=$(date +"%s");
    showPhaseFooter "$curPhase" "$startTime" "$endTime";
    if [ "$curPhase" = unpackPhase ]; then
        [ -n "${sourceRoot:-}" ] && chmod +x -- "${sourceRoot}";
        cd -- "${sourceRoot:-.}";
    fi
}
showPhaseFooter ()
{
 
    local phase="$1";
    local startTime="$2";
    local endTime="$3";
    local delta=$(( endTime - startTime ));
    (( delta < 30 )) && return;
    local H=$((delta/3600));
    local M=$((delta%3600/60));
    local S=$((delta%60));
    echo -n "$phase completed in ";
    (( H > 0 )) && echo -n "$H hours ";
    (( M > 0 )) && echo -n "$M minutes ";
    echo "$S seconds"
}
showPhaseHeader ()
{
 
    local phase="$1";
    echo "Running phase: $phase";
    if [[ -z ${NIX_LOG_FD-} ]]; then
        return;
    fi;
    printf "@nix { \"action\": \"setPhase\", \"phase\": \"%s\" }\n" "$phase" >&"$NIX_LOG_FD"
}
stripDirs ()
{
 
    local cmd="$1";
    local ranlibCmd="$2";
    local paths="$3";
    local stripFlags="$4";
    local excludeFlags=();
    local pathsNew=;
    [ -z "$cmd" ] && echo "stripDirs: Strip command is empty" 1>&2 && exit 1;
    [ -z "$ranlibCmd" ] && echo "stripDirs: Ranlib command is empty" 1>&2 && exit 1;
    local pattern;
    if [ -n "${stripExclude:-}" ]; then
        for pattern in "${stripExclude[@]}";
        do
            excludeFlags+=(-a '!' '(' -name "$pattern" -o -wholename "$prefix/$pattern" ')');
        done;
    fi;
    local p;
    for p in ${paths};
    do
        if [ -e "$prefix/$p" ]; then
            pathsNew="${pathsNew} $prefix/$p";
        fi;
    done;
    paths=${pathsNew};
    if [ -n "${paths}" ]; then
        echo "stripping (with command $cmd and flags $stripFlags) in $paths";
        local striperr;
        striperr="$(mktemp --tmpdir="$TMPDIR" 'striperr.XXXXXX')";
        find $paths -type f "${excludeFlags[@]}" -a '!' -path "$prefix/lib/debug/*" -printf '%D-%i,%p\0' | sort -t, -k1,1 -u -z | cut -d, -f2- -z | xargs -r -0 -n1 -P "$NIX_BUILD_CORES" -- $cmd $stripFlags 2> "$striperr" || exit_code=$?;
        [[ "$exit_code" = 123 || -z "$exit_code" ]] || ( cat "$striperr" 1>&2 && exit 1 );
        rm "$striperr";
        find $paths -name '*.a' -type f -exec $ranlibCmd '{}' \; 2> /dev/null;
    fi
}
stripHash ()
{
 
    local strippedName casematchOpt=0;
    strippedName="$(basename -- "$1")";
    shopt -q nocasematch && casematchOpt=1;
    shopt -u nocasematch;
    if [[ "$strippedName" =~ ^[a-z0-9]{32}- ]]; then
        echo "${strippedName:33}";
    else
        echo "$strippedName";
    fi;
    if (( casematchOpt )); then
        shopt -s nocasematch;
    fi
}
substitute ()
{
 
    local input="$1";
    local output="$2";
    shift 2;
    if [ ! -f "$input" ]; then
        echo "substitute(): ERROR: file '$input' does not exist" 1>&2;
        return 1;
    fi;
    local content;
    consumeEntire content < "$input";
    if [ -e "$output" ]; then
        chmod +w "$output";
    fi;
    substituteStream content "file '$input'" "$@" > "$output"
}
substituteAll ()
{
 
    local input="$1";
    local output="$2";
    local -a args=();
    _allFlags;
    substitute "$input" "$output" "${args[@]}"
}
substituteAllInPlace ()
{
 
    local fileName="$1";
    shift;
    substituteAll "$fileName" "$fileName" "$@"
}
substituteAllStream ()
{
 
    local -a args=();
    _allFlags;
    substituteStream "$1" "$2" "${args[@]}"
}
substituteInPlace ()
{
 
    local -a fileNames=();
    for arg in "$@";
    do
        if [[ "$arg" = "--"* ]]; then
            break;
        fi;
        fileNames+=("$arg");
        shift;
    done;
    if ! [[ "${#fileNames[@]}" -gt 0 ]]; then
        echo "substituteInPlace called without any files to operate on (files must come before options!)" 1>&2;
        return 1;
    fi;
    for file in "${fileNames[@]}";
    do
        substitute "$file" "$file" "$@";
    done
}
substituteStream ()
{
 
    local var=$1;
    local description=$2;
    shift 2;
    while (( "$#" )); do
        local replace_mode="$1";
        case "$1" in 
            --replace)
                if ! "$_substituteStream_has_warned_replace_deprecation"; then
                    echo "substituteStream() in derivation $name: WARNING: '--replace' is deprecated, use --replace-{fail,warn,quiet}. ($description)" 1>&2;
                    _substituteStream_has_warned_replace_deprecation=true;
                fi;
                replace_mode='--replace-warn'
            ;&
            --replace-quiet | --replace-warn | --replace-fail)
                pattern="$2";
                replacement="$3";
                shift 3;
                local savedvar;
                savedvar="${!var}";
                eval "$var"'=${'"$var"'//"$pattern"/"$replacement"}';
                if [ "$pattern" != "$replacement" ]; then
                    if [ "${!var}" == "$savedvar" ]; then
                        if [ "$replace_mode" == --replace-warn ]; then
                            printf "substituteStream() in derivation $name: WARNING: pattern %q doesn't match anything in %s\n" "$pattern" "$description" 1>&2;
                        else
                            if [ "$replace_mode" == --replace-fail ]; then
                                printf "substituteStream() in derivation $name: ERROR: pattern %q doesn't match anything in %s\n" "$pattern" "$description" 1>&2;
                                return 1;
                            fi;
                        fi;
                    fi;
                fi
            ;;
            --subst-var)
                local varName="$2";
                shift 2;
                if ! [[ "$varName" =~ ^[a-zA-Z_][a-zA-Z0-9_]*$ ]]; then
                    echo "substituteStream() in derivation $name: ERROR: substitution variables must be valid Bash names, \"$varName\" isn't." 1>&2;
                    return 1;
                fi;
                if [ -z ${!varName+x} ]; then
                    echo "substituteStream() in derivation $name: ERROR: variable \$$varName is unset" 1>&2;
                    return 1;
                fi;
                pattern="@$varName@";
                replacement="${!varName}";
                eval "$var"'=${'"$var"'//"$pattern"/"$replacement"}'
            ;;
            --subst-var-by)
                pattern="@$2@";
                replacement="$3";
                eval "$var"'=${'"$var"'//"$pattern"/"$replacement"}';
                shift 3
            ;;
            *)
                echo "substituteStream() in derivation $name: ERROR: Invalid command line argument: $1" 1>&2;
                return 1
            ;;
        esac;
    done;
    printf "%s" "${!var}"
}
sysconfigdataHook ()
{
 
    if [ "$1" = '/nix/store/qrc496n6fsqp4p5m5h8wmw5d5jwyw5mr-python3-3.12.8' ]; then
        export _PYTHON_HOST_PLATFORM='linux-x86_64';
        export _PYTHON_SYSCONFIGDATA_NAME='_sysconfigdata__linux_x86_64-linux-gnu';
    fi
}
toPythonPath ()
{
 
    local paths="$1";
    local result=;
    for i in $paths;
    do
        p="$i/lib/python3.12/site-packages";
        result="${result}${result:+:}$p";
    done;
    echo $result
}
unpackFile ()
{
 
    curSrc="$1";
    echo "unpacking source archive $curSrc";
    if ! runOneHook unpackCmd "$curSrc"; then
        echo "do not know how to unpack source archive $curSrc";
        exit 1;
    fi
}
unpackPhase ()
{
 
    runHook preUnpack;
    if [ -z "${srcs:-}" ]; then
        if [ -z "${src:-}" ]; then
            echo 'variable $src or $srcs should point to the source';
            exit 1;
        fi;
        srcs="$src";
    fi;
    local -a srcsArray;
    concatTo srcsArray srcs;
    local dirsBefore="";
    for i in *;
    do
        if [ -d "$i" ]; then
            dirsBefore="$dirsBefore $i ";
        fi;
    done;
    for i in "${srcsArray[@]}";
    do
        unpackFile "$i";
    done;
    : "${sourceRoot=}";
    if [ -n "${setSourceRoot:-}" ]; then
        runOneHook setSourceRoot;
    else
        if [ -z "$sourceRoot" ]; then
            for i in *;
            do
                if [ -d "$i" ]; then
                    case $dirsBefore in 
                        *\ $i\ *)

                        ;;
                        *)
                            if [ -n "$sourceRoot" ]; then
                                echo "unpacker produced multiple directories";
                                exit 1;
                            fi;
                            sourceRoot="$i"
                        ;;
                    esac;
                fi;
            done;
        fi;
    fi;
    if [ -z "$sourceRoot" ]; then
        echo "unpacker appears to have produced no directories";
        exit 1;
    fi;
    echo "source root is $sourceRoot";
    if [ "${dontMakeSourcesWritable:-0}" != 1 ]; then
        chmod -R u+w -- "$sourceRoot";
    fi;
    runHook postUnpack
}
updateAutotoolsGnuConfigScriptsPhase ()
{
 
    if [ -n "${dontUpdateAutotoolsGnuConfigScripts-}" ]; then
        return;
    fi;
    for script in config.sub config.guess;
    do
        for f in $(find . -type f -name "$script");
        do
            echo "Updating Autotools / GNU config script to a newer upstream version: $f";
            cp -f "/nix/store/5xw6dvhrg7b9sf9bixnw9b248qg8kpjs-gnu-config-2024-01-01/$script" "$f";
        done;
    done
}
updateSourceDateEpoch ()
{
 
    local path="$1";
    [[ $path == -* ]] && path="./$path";
    local -a res=($(find "$path" -type f -not -newer "$NIX_BUILD_TOP/.." -printf '%T@ "%p"\0' | sort -n --zero-terminated | tail -n1 --zero-terminated | head -c -1));
    local time="${res[0]//\.[0-9]*/}";
    local newestFile="${res[1]}";
    if [ "${time:-0}" -gt "$SOURCE_DATE_EPOCH" ]; then
        echo "setting SOURCE_DATE_EPOCH to timestamp $time of file $newestFile";
        export SOURCE_DATE_EPOCH="$time";
        local now="$(date +%s)";
        if [ "$time" -gt $((now - 60)) ]; then
            echo "warning: file $newestFile may be generated; SOURCE_DATE_EPOCH may be non-deterministic";
        fi;
    fi
}
PATH="$PATH${nix_saved_PATH:+:$nix_saved_PATH}"
XDG_DATA_DIRS="$XDG_DATA_DIRS${nix_saved_XDG_DATA_DIRS:+:$nix_saved_XDG_DATA_DIRS}"
export NIX_BUILD_TOP="$(mktemp -d -t nix-shell.XXXXXX)"
export TMP="$NIX_BUILD_TOP"
export TMPDIR="$NIX_BUILD_TOP"
export TEMP="$NIX_BUILD_TOP"
export TEMPDIR="$NIX_BUILD_TOP"
eval "${shellHook:-}"
